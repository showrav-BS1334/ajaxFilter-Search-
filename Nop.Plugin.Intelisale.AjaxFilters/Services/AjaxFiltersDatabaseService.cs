using Nop.Plugin.Intelisale.AjaxFilters.Domain;
using Nop.Plugin.Intelisale.AjaxFilters.Domain.QueryTypes;
using LinqToDB.Data;
using Nop.Data;
using Nop.Services.Configuration;
using Nop.Services.Logging;
using Nop.Services.Security;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nop.Plugin.Intelisale.AjaxFilters.Services
{
    public class AjaxFiltersDatabaseService : IAjaxFiltersDatabaseService
    {
        private readonly INopDataProvider _dataProvider;

        private readonly IEncryptionService _encryptionService;

        private readonly ISettingService _settingService;

        private readonly ILogger _logger;

        private const int TimeoutSeconds = 180;

        private const string EncryptionKey = "SS_AjaxFilters_EK_351";

        private string CreateSortFunctionSql = "CREATE FUNCTION [dbo].[seven_spikes_ajax_filters_product_sorting] (@OrderBy  INT, @CategoryIdsCount INT, @ManufacturerId INT, @ParentGroupedProductId INT)  RETURNS VARCHAR(250)  AS BEGIN      DECLARE @sql_orderby VARCHAR(250) = ''  \t  \t IF @OrderBy = 5   \t\tSET @sql_orderby = ' p.[Name] ASC'  \tELSE IF @OrderBy = 6   \t\tSET @sql_orderby = ' p.[Name] DESC'  \tELSE IF @OrderBy = 10   \t\tSET @sql_orderby = ' p.[Price] ASC'  \tELSE IF @OrderBy = 11   \t\tSET @sql_orderby = ' p.[Price] DESC'  \tELSE IF @OrderBy = 15   \t\tSET @sql_orderby = ' p.[CreatedOnUtc] DESC'  \tELSE   \tBEGIN  \t\t \t\tIF @CategoryIdsCount > 0 SET @sql_orderby = ' pcm.DisplayOrder ASC'  \t\t  \t\t \t\tIF @ManufacturerId > 0  \t\tBEGIN  \t\t\tIF LEN(@sql_orderby) > 0 SET @sql_orderby = @sql_orderby + ', '  \t\t\tSET @sql_orderby = @sql_orderby + ' pmm.DisplayOrder ASC'  \t\tEND  \t\t  \t\t \t\tIF @ParentGroupedProductId > 0  \t\tBEGIN  \t\t\tIF LEN(@sql_orderby) > 0 SET @sql_orderby = @sql_orderby + ', '  \t\t\tSET @sql_orderby = @sql_orderby + ' p.[DisplayOrder] ASC'  \t\tEND  \t\t  \t\t \t\tIF LEN(@sql_orderby) > 0 SET @sql_orderby = @sql_orderby + ', '  \t\tSET @sql_orderby = @sql_orderby + ' p.[Name] ASC'  \tEND    \tRETURN @sql_orderby  END";

        private string DropSortFunctionSql = "IF EXISTS (      SELECT * FROM sysobjects WHERE id = object_id(N'[dbo].[seven_spikes_ajax_filters_product_sorting]')       AND xtype IN (N'FN', N'IF', N'TF')  )      DROP FUNCTION [dbo].[seven_spikes_ajax_filters_product_sorting]";

        private string DropProcedureSql = "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ProductLoadAllPagedNopAjaxFilters]') AND type in (N'P', N'PC')) DROP PROCEDURE [dbo].[ProductLoadAllPagedNopAjaxFilters]";

        private string CreateStoredProcedureSql = "CREATE PROCEDURE [dbo].[ProductLoadAllPagedNopAjaxFilters]  (  \t@CategoryIds\t\tnvarchar(MAX) = null,\t \t@ManufacturerId\t\tint = 0,  \t@StoreId\t\t\tint = 0,  \t@VendorId\t\t\tint = 0,  \t@ParentGroupedProductId\tint = 0,  \t@ProductTypeId\t\tint = null,  \t@VisibleIndividuallyOnly bit = 0, \t \t@ProductTagId\t\tint = 0,  \t@FeaturedProducts\tbit = null,\t \t@PriceMin\t\t\tdecimal(18, 4) = null,  \t@PriceMax\t\t\tdecimal(18, 4) = null,  \t@Keywords\t\t\tnvarchar(4000) = null,  \t@SearchDescriptions bit = 0,  \t@SearchManufacturerPartNumber bit = 0,  \t@SearchSku\t\t\tbit = 0,  \t@SearchProductTags  bit = 0,  \t@UseFullTextSearch  bit = 0,  \t@FullTextMode\t\tint = 0,  \t@FilteredSpecs\t\tnvarchar(MAX) = null,\t \t@FilteredProductVariantAttributes\t\tnvarchar(MAX) = null,  \t@FilteredManufacturers\t\tnvarchar(MAX) = null,  \t@FilteredVendors\tnvarchar(MAX) = null,  \t@OnSale\t\t\t\tbit = 0,  \t@InStock\t\t\tbit = 0,  \t@LanguageId\t\t\tint = 0,  \t@OrderBy\t\t\tint = 0,  \t@AllowedCustomerRoleIds\tnvarchar(MAX) = null,\t \t@PageIndex\t\t\tint = 0,   \t@PageSize\t\t\tint = 2147483644,  \t@ShowHidden\t\t\tbit = 0,  \t@LoadAvailableFilters bit = 0,  \t@FilterableSpecificationAttributeOptionIds nvarchar(MAX) = null OUTPUT,  \t@FilterableProductVariantAttributeIds nvarchar(MAX) = null OUTPUT,  \t@FilterableManufacturerIds nvarchar(MAX) = null OUTPUT,  \t@FilterableVendorIds nvarchar(MAX) = null OUTPUT,  \t@IsOnSaleFilterEnabled \tbit = 0,  \t@IsInStockFilterEnabled bit = 0,  \t@HasProductsOnSale\tbit = 0 OUTPUT,  \t@HasProductsInStock\tbit = 0 OUTPUT,  \t@TotalRecords\t\tint = null OUTPUT  )    WITH ENCRYPTION    AS  BEGIN  \t  \t \t \t \t \t  \t    \t  \tCREATE TABLE #KeywordProducts  \t(  \t\t[ProductId] int NOT NULL  \t)    \tDECLARE  \t\t@SearchKeywords bit,  \t\t@OriginalKeywords nvarchar(4000),  \t\t@sql nvarchar(max),  \t\t@sqlWithoutFilters nvarchar(max),  \t\t@sql_orderby nvarchar(max)    \tSET NOCOUNT ON  \t  \t \tSET @Keywords = isnull(@Keywords, '')  \tSET @Keywords = rtrim(ltrim(@Keywords))  \tSET @OriginalKeywords = @Keywords  \tIF ISNULL(@Keywords, '') != ''  \tBEGIN  \t\tSET @SearchKeywords = 1  \t\t  \t\tIF @UseFullTextSearch = 1  \t\tBEGIN  \t\t\t \t\t\tSET @Keywords = REPLACE(@Keywords, '''', '')  \t\t\tSET @Keywords = REPLACE(@Keywords, '\"', '')  \t\t\t  \t\t\t \t\t\tIF @FullTextMode = 0   \t\t\tBEGIN  \t\t\t\t \t\t\t\tSET @Keywords = ' \"' + @Keywords + '*\" '  \t\t\tEND  \t\t\tELSE  \t\t\tBEGIN  \t\t\t\t \t\t\t\t   \t\t\t\t \t\t\t\tWHILE CHARINDEX('  ', @Keywords) > 0   \t\t\t\t\tSET @Keywords = REPLACE(@Keywords, '  ', ' ')    \t\t\t\tDECLARE @concat_term nvarchar(100)\t\t\t\t  \t\t\t\tIF @FullTextMode = 5  \t\t\t\tBEGIN  \t\t\t\t\tSET @concat_term = 'OR'  \t\t\t\tEND   \t\t\t\tIF @FullTextMode = 10  \t\t\t\tBEGIN  \t\t\t\t\tSET @concat_term = 'AND'  \t\t\t\tEND    \t\t\t\t \t\t\t\tdeclare @fulltext_keywords nvarchar(4000)  \t\t\t\tset @fulltext_keywords = N''  \t\t\t\tdeclare @index int\t\t  \t\t  \t\t\t\tset @index = CHARINDEX(' ', @Keywords, 0)    \t\t\t\t \t\t\t\tIF(@index = 0)  \t\t\t\t\tset @fulltext_keywords = ' \"' + @Keywords + '*\" '  \t\t\t\tELSE  \t\t\t\tBEGIN\t\t  \t\t\t\t\tDECLARE @first BIT  \t\t\t\t\tSET  @first = 1\t\t\t  \t\t\t\t\tWHILE @index > 0  \t\t\t\t\tBEGIN  \t\t\t\t\t\tIF (@first = 0)  \t\t\t\t\t\t\tSET @fulltext_keywords = @fulltext_keywords + ' ' + @concat_term + ' '  \t\t\t\t\t\tELSE  \t\t\t\t\t\t\tSET @first = 0    \t\t\t\t\t\tSET @fulltext_keywords = @fulltext_keywords + '\"' + SUBSTRING(@Keywords, 1, @index - 1) + '*\"'\t\t\t\t\t  \t\t\t\t\t\tSET @Keywords = SUBSTRING(@Keywords, @index + 1, LEN(@Keywords) - @index)\t\t\t\t\t\t  \t\t\t\t\t\tSET @index = CHARINDEX(' ', @Keywords, 0)  \t\t\t\t\tend  \t\t\t\t\t  \t\t\t\t\t \t\t\t\t\tIF LEN(@fulltext_keywords) > 0  \t\t\t\t\t\tSET @fulltext_keywords = @fulltext_keywords + ' ' + @concat_term + ' ' + '\"' + SUBSTRING(@Keywords, 1, LEN(@Keywords)) + '*\"'\t  \t\t\t\tEND  \t\t\t\tSET @Keywords = @fulltext_keywords  \t\t\tEND  \t\tEND  \t\tELSE  \t\tBEGIN  \t\t\t \t\t\tSET @Keywords = '%' + @Keywords + '%'  \t\tEND  \t\t   \t\t \t\tSET @sql = '  \t\tINSERT INTO #KeywordProducts ([ProductId])  \t\tSELECT p.Id  \t\tFROM Product p with (NOLOCK)  \t\tWHERE '  \t\tIF @UseFullTextSearch = 1  \t\t\tSET @sql = @sql + 'CONTAINS(p.[Name], @Keywords) '  \t\tELSE  \t\t\tSET @sql = @sql + 'PATINDEX(@Keywords, p.[Name]) > 0 '      \t\t \t\tSET @sql = @sql + '  \t\tUNION  \t\tSELECT lp.EntityId  \t\tFROM LocalizedProperty lp with (NOLOCK)  \t\tWHERE  \t\t\tlp.LocaleKeyGroup = N''Product''  \t\t\tAND lp.LanguageId = ' + ISNULL(CAST(@LanguageId AS nvarchar(max)), '0') + '  \t\t\tAND lp.LocaleKey = N''Name'''  \t\tIF @UseFullTextSearch = 1  \t\t\tSET @sql = @sql + ' AND CONTAINS(lp.[LocaleValue], @Keywords) '  \t\tELSE  \t\t\tSET @sql = @sql + ' AND PATINDEX(@Keywords, lp.[LocaleValue]) > 0 '  \t    \t\tIF @SearchDescriptions = 1  \t\tBEGIN  \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT p.Id  \t\t\tFROM Product p with (NOLOCK)  \t\t\tWHERE '  \t\t\tIF @UseFullTextSearch = 1  \t\t\t\tSET @sql = @sql + 'CONTAINS(p.[ShortDescription], @Keywords) '  \t\t\tELSE  \t\t\t\tSET @sql = @sql + 'PATINDEX(@Keywords, p.[ShortDescription]) > 0 '      \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT p.Id  \t\t\tFROM Product p with (NOLOCK)  \t\t\tWHERE '  \t\t\tIF @UseFullTextSearch = 1  \t\t\t\tSET @sql = @sql + 'CONTAINS(p.[FullDescription], @Keywords) '  \t\t\tELSE  \t\t\t\tSET @sql = @sql + 'PATINDEX(@Keywords, p.[FullDescription]) > 0 '        \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT lp.EntityId  \t\t\tFROM LocalizedProperty lp with (NOLOCK)  \t\t\tWHERE  \t\t\t\tlp.LocaleKeyGroup = N''Product''  \t\t\t\tAND lp.LanguageId = ' + ISNULL(CAST(@LanguageId AS nvarchar(max)), '0') + '  \t\t\t\tAND lp.LocaleKey = N''ShortDescription'''  \t\t\tIF @UseFullTextSearch = 1  \t\t\t\tSET @sql = @sql + ' AND CONTAINS(lp.[LocaleValue], @Keywords) '  \t\t\tELSE  \t\t\t\tSET @sql = @sql + ' AND PATINDEX(@Keywords, lp.[LocaleValue]) > 0 '  \t\t\t\t    \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT lp.EntityId  \t\t\tFROM LocalizedProperty lp with (NOLOCK)  \t\t\tWHERE  \t\t\t\tlp.LocaleKeyGroup = N''Product''  \t\t\t\tAND lp.LanguageId = ' + ISNULL(CAST(@LanguageId AS nvarchar(max)), '0') + '  \t\t\t\tAND lp.LocaleKey = N''FullDescription'''  \t\t\tIF @UseFullTextSearch = 1  \t\t\t\tSET @sql = @sql + ' AND CONTAINS(lp.[LocaleValue], @Keywords) '  \t\t\tELSE  \t\t\t\tSET @sql = @sql + ' AND PATINDEX(@Keywords, lp.[LocaleValue]) > 0 '  \t\tEND  \t\t  \t\t \t\tIF @SearchManufacturerPartNumber = 1  \t\tBEGIN  \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT p.Id  \t\t\tFROM Product p with (NOLOCK)  \t\t\tWHERE p.[ManufacturerPartNumber] = @OriginalKeywords '  \t\tEND    \t\t \t\tIF @SearchSku = 1  \t\tBEGIN  \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT p.Id  \t\t\tFROM Product p with (NOLOCK)  \t\t\tWHERE p.[Sku] = @OriginalKeywords '  \t\tEND    \t\tIF @SearchProductTags = 1  \t\tBEGIN  \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT pptm.Product_Id  \t\t\tFROM Product_ProductTag_Mapping pptm with(NOLOCK) INNER JOIN ProductTag pt with(NOLOCK) ON pt.Id = pptm.ProductTag_Id  \t\t\tWHERE pt.[Name] = @OriginalKeywords '    \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT pptm.Product_Id  \t\t\tFROM LocalizedProperty lp with (NOLOCK) INNER JOIN Product_ProductTag_Mapping pptm with(NOLOCK) ON lp.EntityId = pptm.ProductTag_Id  \t\t\tWHERE  \t\t\t\tlp.LocaleKeyGroup = N''ProductTag''  \t\t\t\tAND lp.LanguageId = ' + ISNULL(CAST(@LanguageId AS nvarchar(max)), '0') + '  \t\t\t\tAND lp.LocaleKey = N''Name''  \t\t\t\tAND lp.[LocaleValue] = @OriginalKeywords '  \t\tEND    \t\t \t\tEXEC sp_executesql @sql, N'@Keywords nvarchar(4000), @OriginalKeywords nvarchar(4000)', @Keywords, @OriginalKeywords    \tEND  \tELSE  \tBEGIN  \t\tSET @SearchKeywords = 0  \tEND    \t \tSET @CategoryIds = isnull(@CategoryIds, '')\t  \tCREATE TABLE #FilteredCategoryIds  \t(  \t\tCategoryId int not null  \t)  \tINSERT INTO #FilteredCategoryIds (CategoryId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@CategoryIds, ',')\t  \tDECLARE @CategoryIdsCount int\t  \tSET @CategoryIdsCount = (SELECT COUNT(1) FROM #FilteredCategoryIds)    \t \tSET @FilteredSpecs = isnull(@FilteredSpecs, '')\t  \tCREATE TABLE #FilteredSpecificationAttributeOptions  \t(  \t\tSpecificationAttributeOptionId int not null unique  \t)    \tINSERT INTO #FilteredSpecificationAttributeOptions (SpecificationAttributeOptionId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@FilteredSpecs, ',')    \tDECLARE @SpecificationAttributesCount int\t  \tSET @SpecificationAttributesCount =   \t(  \t\tSELECT COUNT(DISTINCT sao.SpecificationAttributeId) FROM #FilteredSpecificationAttributeOptions fs   \t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = fs.SpecificationAttributeOptionId   \t)    \tCREATE TABLE #FilteredSpecificationAttributes  \t(  \t\tAttributeId int not null  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_#FilteredSpecificationAttributes_AttributeId  \tON #FilteredSpecificationAttributes (AttributeId);    \tINSERT INTO #FilteredSpecificationAttributes  \tSELECT DISTINCT sap.SpecificationAttributeId  \tFROM SpecificationAttributeOption sap  \tINNER JOIN #FilteredSpecificationAttributeOptions fs ON fs.SpecificationAttributeOptionId = sap.Id  \t  \t \tSET @FilteredProductVariantAttributes = isnull(@FilteredProductVariantAttributes, '')\t  \tCREATE TABLE #FilteredProductVariantAttributes  \t(  \t\tProductVariantAttributeId int not null  \t)    \tCREATE INDEX IX_FilteredProductVariantAttributes_ProductVariantAttributeId  \tON #FilteredProductVariantAttributes (ProductVariantAttributeId);     \tINSERT INTO #FilteredProductVariantAttributes (ProductVariantAttributeId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@FilteredProductVariantAttributes, ',')    \tDECLARE @ProductAttributesCount int\t  \tSET @ProductAttributesCount =   \t(  \t\tSELECT COUNT(DISTINCT ppm.ProductAttributeId) FROM #FilteredProductVariantAttributes fpva   \t\tINNER JOIN Product_ProductAttribute_Mapping ppm ON ppm.Id = fpva.ProductVariantAttributeId   \t)    \tCREATE TABLE #FilteredProductAttributes  \t(  \t\tAttributeId int not null  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_#FilteredAttributes_AttributeId  \tON #FilteredProductAttributes (AttributeId);    \tINSERT INTO #FilteredProductAttributes  \tSELECT DISTINCT ProductAttributeId  \tFROM Product_ProductAttribute_Mapping ppm  \tINNER JOIN #FilteredProductVariantAttributes fpv ON fpv.ProductVariantAttributeId = ppm.Id  \t  \t \tSET @FilteredManufacturers = isnull(@FilteredManufacturers, '')\t  \tCREATE TABLE #FilteredManufacturers  \t(  \t\tManufacturerId int not null  \t)  \tINSERT INTO #FilteredManufacturers (ManufacturerId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@FilteredManufacturers, ',')  \tDECLARE @ManufacturersCount int\t  \tSET @ManufacturersCount = (SELECT COUNT(1) FROM #FilteredManufacturers)  \t  \t \tSET @FilteredVendors = isnull(@FilteredVendors, '')\t  \tCREATE TABLE #FilteredVendorIds  \t(  \t\tVendorId int not null  \t)  \tINSERT INTO #FilteredVendorIds (VendorId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@FilteredVendors, ',')\t\t  \tDECLARE @VendorsCount int\t  \tSET @VendorsCount = (SELECT COUNT(1) FROM #FilteredVendorIds)    \t \tSET @AllowedCustomerRoleIds = isnull(@AllowedCustomerRoleIds, '')\t  \tCREATE TABLE #FilteredCustomerRoleIds  \t(  \t\tCustomerRoleId int not null  \t)  \tINSERT INTO #FilteredCustomerRoleIds (CustomerRoleId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@AllowedCustomerRoleIds, ',')  \tDECLARE @FilteredCustomerRoleIdsCount int\t  \tSET @FilteredCustomerRoleIdsCount = (SELECT COUNT(1) FROM #FilteredCustomerRoleIds)  \t\t  \t \tDECLARE @PageLowerBound int  \tDECLARE @PageUpperBound int  \tDECLARE @RowsToReturn int  \tSET @RowsToReturn = @PageSize * (@PageIndex + 1)\t  \tSET @PageLowerBound = @PageSize * @PageIndex  \tSET @PageUpperBound = @PageLowerBound + @PageSize + 1  \t  \tCREATE TABLE #DisplayOrderTmp   \t(  \t\t[Id] int IDENTITY (1, 1) NOT NULL,  \t\t[ProductId] int NOT NULL,  \t\t[ChildProductId] int  \t)    \t \t \tSET @sql = '  \tINSERT INTO #DisplayOrderTmp ([ProductId], [ChildProductId])  \tSELECT p.Id, ISNULL(cp.Id, 0)  \tFROM  \t\tProduct p with (NOLOCK)  \t\tLEFT JOIN Product cp with (NOLOCK)  \t\tON p.Id = cp.ParentGroupedProductId'  \t  \tIF @CategoryIdsCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tLEFT JOIN Product_Category_Mapping pcm with (NOLOCK)  \t\t\tON p.Id = pcm.ProductId'  \tEND  \t  \tIF @ManufacturerId > 0 OR @ManufacturersCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tLEFT JOIN Product_Manufacturer_Mapping pmm with (NOLOCK)  \t\t\tON p.Id = pmm.ProductId'  \tEND  \t  \tIF ISNULL(@ProductTagId, 0) != 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tLEFT JOIN Product_ProductTag_Mapping pptm with (NOLOCK)  \t\t\tON p.Id = pptm.Product_Id'  \tEND  \t  \t \tIF @SearchKeywords = 1  \tBEGIN  \t\tSET @sql = @sql + '  \t\tJOIN #KeywordProducts kp  \t\t\tON  p.Id = kp.ProductId'  \tEND  \t  \tSET @sql = @sql + '  \tWHERE  \t\tp.Deleted = 0'  \t\t  \tSET @sql = @sql + '  \tAND  \t\t(p.ParentGroupedProductId = 0 OR p.VisibleIndividually = 1)'  \t  \t \tIF @CategoryIdsCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND pcm.CategoryId IN (SELECT CategoryId FROM #FilteredCategoryIds)'  \t\t  \t\tIF @FeaturedProducts IS NOT NULL  \t\tBEGIN  \t\t\tSET @sql = @sql + '  \t\tAND pcm.IsFeaturedProduct = ' + CAST(@FeaturedProducts AS nvarchar(max))  \t\tEND  \tEND  \t  \t \tIF @ManufacturerId > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND pmm.ManufacturerId = ' + CAST(@ManufacturerId AS nvarchar(max))  \t\t  \t\tIF @FeaturedProducts IS NOT NULL  \t\tBEGIN  \t\t\tSET @sql = @sql + '  \t\tAND pmm.IsFeaturedProduct = ' + CAST(@FeaturedProducts AS nvarchar(max))  \t\tEND  \tEND  \t  \t \tIF @VendorId > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.VendorId = ' + CAST(@VendorId AS nvarchar(max))  \tEND  \t  \t \tIF @ParentGroupedProductId > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.ParentGroupedProductId = ' + CAST(@ParentGroupedProductId AS nvarchar(max))  \tEND  \t  \t \tIF @OnSale = 1  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND   \t\t\t(  \t\t\t\t(cp.ID IS NULL AND p.OldPrice > 0  AND p.OldPrice != p.Price)  \t\t\t  \t\t\tOR  \t\t\t   \t\t\t\t(cp.ID IS NOT NULL AND cp.OldPrice > 0  AND cp.OldPrice != cp.Price)  \t\t\t)'  \tEND  \t \tIF @InStock = 1  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND   \t\t\t(  \t\t\t\t(cp.ID IS NULL  AND   \t\t\t\t\t(  \t\t\t\t\t\t(p.ManageInventoryMethodId = 0) OR  \t\t\t\t\t\t(P.ManageInventoryMethodId = 1 AND  \t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t(p.StockQuantity > 0 AND p.UseMultipleWarehouses = 0) OR   \t\t\t\t\t\t\t\t(EXISTS(SELECT 1 FROM ProductWarehouseInventory [pwi] WHERE\t[pwi].ProductId = p.Id\tAND [pwi].StockQuantity > 0 AND [pwi].StockQuantity > [pwi].ReservedQuantity) AND p.UseMultipleWarehouses = 1)  \t\t\t\t\t\t\t)  \t\t\t\t\t\t)  \t\t\t\t\t)  \t\t\t\t)  \t\t\t\tOR  \t\t\t\t(p.Id IS NOT NULL AND   \t\t\t\t\t(  \t\t\t\t\t\t(cp.ManageInventoryMethodId = 0) OR  \t\t\t\t\t\t(cp.ManageInventoryMethodId = 1 AND  \t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t(cp.StockQuantity > 0 AND cp.UseMultipleWarehouses = 0) OR   \t\t\t\t\t\t\t\t(EXISTS(SELECT 1 FROM ProductWarehouseInventory [pwi] WHERE [pwi].ProductId = cp.Id\tAND [pwi].StockQuantity > 0 AND [pwi].StockQuantity > [pwi].ReservedQuantity) AND cp.UseMultipleWarehouses = 1)  \t\t\t\t\t\t\t)  \t\t\t\t\t\t)  \t\t\t\t\t)  \t\t\t\t)  \t\t\t)'  \tEND  \t \tIF @ProductTypeId is not null  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.ProductTypeId = ' + CAST(@ProductTypeId AS nvarchar(max))  \tEND  \t  \t \tIF @VisibleIndividuallyOnly = 1  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.VisibleIndividually = 1'  \tEND  \t  \t \tIF ISNULL(@ProductTagId, 0) != 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND pptm.ProductTag_Id = ' + CAST(@ProductTagId AS nvarchar(max))  \tEND  \t  \t \tIF @ShowHidden = 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.Published = 1  \t\tAND p.Deleted = 0  \t\tAND (getutcdate() BETWEEN ISNULL(p.AvailableStartDateTimeUtc, ''1/1/1900'') and ISNULL(p.AvailableEndDateTimeUtc, ''1/1/2999''))'  \tEND  \t  \t \t \t \tIF @PriceMin > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (  \t\t\t\t(  \t\t\t\t\tcp.Id IS NULL  \t\t\t\t\t  \t\t\t\t\tAND  \t\t\t\t\t  \t\t\t\t\t(p.Price >= ' + CAST(@PriceMin AS nvarchar(max)) + ')  \t\t\t\t)  \t\t\t\tOR  \t\t\t\t(\t  \t\t\t\t\t(cp.Price >= ' + CAST(@PriceMin AS nvarchar(max)) + ')  \t\t\t\t)  \t\t\t)'  \tEND  \t  \t \t \t \tIF @PriceMax > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (  \t\t\t\t(  \t\t\t\t\tcp.Id IS NULL  \t\t\t\t\t  \t\t\t\t\tAND  \t\t\t\t\t  \t\t\t\t\t(p.Price <= ' + CAST(@PriceMax AS nvarchar(max)) + ')  \t\t\t\t)  \t\t\t\tOR  \t\t\t\t(  \t\t\t\t\t(cp.Price <= ' + CAST(@PriceMax AS nvarchar(max)) + ')  \t\t\t\t)  \t\t\t)'  \tEND  \t    \t \tIF @FilteredCustomerRoleIdsCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (p.SubjectToAcl = 0 OR EXISTS (  \t\t\tSELECT 1 FROM #FilteredCustomerRoleIds [fcr]  \t\t\tWHERE  \t\t\t\t[fcr].CustomerRoleId IN (  \t\t\t\t\tSELECT [acl].CustomerRoleId  \t\t\t\t\tFROM [AclRecord] acl with (NOLOCK)  \t\t\t\t\tWHERE [acl].EntityId = p.Id AND [acl].EntityName = ''Product''  \t\t\t\t)  \t\t\t))'  \tEND  \t  \t \tIF @StoreId > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (p.LimitedToStores = 0 OR EXISTS (  \t\t\tSELECT 1 FROM [StoreMapping] sm with (NOLOCK)  \t\t\tWHERE [sm].EntityId = p.Id AND [sm].EntityName = ''Product'' and [sm].StoreId=' + CAST(@StoreId AS nvarchar(max)) + '  \t\t\t))'  \tEND  \t  \t \t \tSET @sqlWithoutFilters = @sql  \t  \t \t \t \t \t \tIF @SpecificationAttributesCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (  \t\t\t\t(SELECT AttributesCount FROM #FilteredSpecificationAttributesToProduct fsatp  \t\t\t\tWHERE p.Id = fsatp.ProductId) = ' + CAST(@SpecificationAttributesCount AS nvarchar(max)) +   \t\t\t')'  \tEND  \t  \t \t \t \t \t \t  \t \t \t  \tIF @ProductAttributesCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\t\t\tAND (  \t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct fpatp  \t\t\t\tWHERE (cp.Id IS NULL AND p.Id = fpatp.ProductId) OR cp.Id = fpatp.ProductId) = ' + CAST(@ProductAttributesCount AS nvarchar(max)) +   \t\t\t')'  \tEND  \t  \t \tIF @ManufacturersCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND pmm.ManufacturerId IN (SELECT ManufacturerId FROM #FilteredManufacturers)'  \tEND  \t  \t \tIF @VendorsCount > 0  \tBEGIN  \t\t  \t\tSET @sql = @sql + '   \t\tAND p.VendorId IN (SELECT VendorId FROM #FilteredVendorIds)'  \tEND  \t  \t \tSET @sql_orderby = [dbo].[seven_spikes_ajax_filters_product_sorting] (@OrderBy, @CategoryIdsCount, @ManufacturerId, @ParentGroupedProductId)  \t  \tSET @sql = @sql + '  \tORDER BY' + @sql_orderby    \t  \t \t \t \t \t \t \t \t  \tEXEC sp_executesql @sqlWithoutFilters  \t  \tCREATE TABLE #ProductIdsBeforeFiltersApplied   \t(  \t\t[ProductId] int NOT NULL,  \t\t[ChildProductId] int  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_ProductIds_ProductId  \tON #ProductIdsBeforeFiltersApplied (ProductId, ChildProductId);    \tINSERT INTO #ProductIdsBeforeFiltersApplied ([ProductId], [ChildProductId])  \tSELECT ProductId, ChildProductId  \tFROM #DisplayOrderTmp  \tGROUP BY ProductId, ChildProductId  \tORDER BY min([Id])    \t \t   \tDELETE FROM #DisplayOrderTmp    \t \t \t \t \t   \tCREATE TABLE #FilteredSpecificationAttributesToProduct  \t(  \t\tProductId int not null,  \t\tAttributesCount int not null  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_#FilteredSpecificationAttributesToProduct_ProductId  \tON #FilteredSpecificationAttributesToProduct (ProductId)    \tIF @SpecificationAttributesCount > 0  \tBEGIN    \t\t \t\t \t\t   \t\tIF @SpecificationAttributesCount > 1  \t\tBEGIN    \t\t\tINSERT INTO #FilteredSpecificationAttributesToProduct  \t\t\tSELECT psm.ProductId, COUNT (DISTINCT sao.SpecificationAttributeId)  \t\t\tFROM Product_SpecificationAttribute_Mapping psm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = psm.ProductId  \t\t\tINNER JOIN #FilteredSpecificationAttributeOptions fs ON fs.SpecificationAttributeOptionId = psm.SpecificationAttributeOptionId  \t\t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = psm.SpecificationAttributeOptionId  \t\t\tGROUP BY psm.ProductId  \t\t\tHAVING COUNT (DISTINCT sao.SpecificationAttributeId) >= @SpecificationAttributesCount - 1  \t\tEND    \t\tIF @SpecificationAttributesCount = 1  \t\tBEGIN    \t\t\tINSERT INTO #FilteredSpecificationAttributesToProduct  \t\t\tSELECT DISTINCT psm.ProductId, 1  \t\t\tFROM Product_SpecificationAttribute_Mapping psm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = psm.ProductId  \t\t\tINNER JOIN #FilteredSpecificationAttributeOptions fs ON fs.SpecificationAttributeOptionId = psm.SpecificationAttributeOptionId AND psm.AllowFiltering = 1     \t\t\tINSERT INTO #FilteredSpecificationAttributesToProduct  \t\t\tSELECT DISTINCT psm.ProductId, 0  \t\t\tFROM Product_SpecificationAttribute_Mapping psm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = psm.ProductId  \t\t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = psm.SpecificationAttributeOptionId  \t\t\tINNER JOIN #FilteredSpecificationAttributes fsa ON fsa.AttributeId = sao.SpecificationAttributeId  \t\t\tWHERE NOT EXISTS (SELECT NULL FROM #FilteredSpecificationAttributesToProduct fsatp WHERE fsatp.ProductId = psm.ProductId) AND psm.AllowFiltering = 1     \t\tEND      \t\t \t\t \t\t   \t\tIF @SpecificationAttributesCount > 1  \t\tBEGIN    \t\t\tDELETE #FilteredSpecificationAttributesToProduct  \t\t\tFROM #FilteredSpecificationAttributesToProduct fsatp  \t\t\tWHERE (SELECT COUNT (DISTINCT sao.SpecificationAttributeId)  \t\t\tFROM Product_SpecificationAttribute_Mapping psm  \t\t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = psm.SpecificationAttributeOptionId  \t\t\tINNER JOIN #FilteredSpecificationAttributes fsa ON fsa.AttributeId = sao.SpecificationAttributeId  \t\t\tWHERE psm.ProductId = fsatp.ProductId) < @SpecificationAttributesCount    \t\tEND    \tEND    \t \t \t \t \t \t \t   \tCREATE TABLE #FilteredProductAttributesToProduct  \t(  \t\tProductId int not null,  \t\tAttributesCount int not null  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_#FilteredProductAttributesToProduct_ProductId  \tON #FilteredProductAttributesToProduct (ProductId)    \t \t \t   \tIF @ProductAttributesCount > 0  \tBEGIN    \t\t \t\t \t\t   \t\tIF @ProductAttributesCount > 1  \t\tBEGIN    \t\t\tINSERT INTO #FilteredProductAttributesToProduct  \t\t\tSELECT ppm.ProductId, COUNT (DISTINCT ppm.ProductAttributeId)  \t\t\tFROM Product_ProductAttribute_Mapping ppm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = ppm.ProductId OR p.ChildProductId = ppm.ProductId  \t\t\tINNER JOIN #FilteredProductVariantAttributes fpva ON fpva.ProductVariantAttributeId = ppm.Id  \t\t\tGROUP BY ppm.ProductId  \t\t\tHAVING COUNT(DISTINCT ppm.ProductAttributeId) >= @ProductAttributesCount - 1    \t\tEND    \t\tIF @ProductAttributesCount = 1  \t\tBEGIN    \t\t\tINSERT INTO #FilteredProductAttributesToProduct  \t\t\tSELECT DISTINCT ppm.ProductId, 1  \t\t\tFROM Product_ProductAttribute_Mapping ppm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = ppm.ProductId OR p.ChildProductId = ppm.ProductId  \t\t\tINNER JOIN #FilteredProductVariantAttributes fpva ON fpva.ProductVariantAttributeId = ppm.Id    \t\t\tINSERT INTO #FilteredProductAttributesToProduct  \t\t\tSELECT DISTINCT ppm.ProductId, 0  \t\t\tFROM Product_ProductAttribute_Mapping ppm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = ppm.ProductId OR p.ChildProductId = ppm.ProductId  \t\t\tINNER JOIN #FilteredProductAttributes fa ON fa.AttributeId = ppm.ProductAttributeId  \t\t\tWHERE ppm.ProductId NOT IN (SELECT ProductId FROM #FilteredProductAttributesToProduct)    \t\tEND    \t\t \t\t \t\t \t\t \t\t \t\t   \t\t \t\t \t\t \t\t \t\t \t\t   \t\t \t\t \t\t   \t\tIF @ProductAttributesCount > 1  \t\tBEGIN    \t\t\tDELETE #FilteredProductAttributesToProduct  \t\t\tFROM #FilteredProductAttributesToProduct fpatp  \t\t\tWHERE (SELECT COUNT(DISTINCT ppm.ProductAttributeId) FROM  \t\t\tProduct_ProductAttribute_Mapping ppm  \t\t\tINNER JOIN #FilteredProductAttributes fa ON fa.AttributeId = ppm.ProductAttributeId  \t\t\tWHERE ppm.ProductId = fpatp.ProductId) < @ProductAttributesCount    \t\tEND    \tEND  \t  \t   \tEXEC sp_executesql @sql    \tCREATE TABLE #PageIndex   \t(  \t\t[IndexId] int IDENTITY (1, 1) NOT NULL,  \t\t[ProductId] int NOT NULL,  \t\t[ChildProductId] int  \t)  \t  \tINSERT INTO #PageIndex ([ProductId], [ChildProductId])  \tSELECT ProductId, ChildProductId  \tFROM #DisplayOrderTmp  \tGROUP BY ProductId, ChildProductId  \tORDER BY min([Id])  \t  \tSET @TotalRecords = @@rowcount  \t  \t   \tIF @LoadAvailableFilters = 1  \tBEGIN  \t  \t\tCREATE TABLE #PotentialProductSpecificationAttributeIds   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[SpecificationAttributeOptionId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\t \t\t \t\tINSERT INTO #PotentialProductSpecificationAttributeIds ([ProductId], [SpecificationAttributeOptionId])  \t\tSELECT psm.ProductId, psm.SpecificationAttributeOptionId  \t\tFROM Product_SpecificationAttribute_Mapping psm  \t\tINNER JOIN #FilteredSpecificationAttributesToProduct fsatp on fsatp.ProductId = psm.ProductId  \t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = psm.SpecificationAttributeOptionId  \t\tINNER JOIN #FilteredSpecificationAttributes fsa ON fsa.AttributeId = sao.SpecificationAttributeId  \t\tWHERE fsatp.AttributesCount = @SpecificationAttributesCount - 1 AND  \t\tsao.SpecificationAttributeId NOT IN   \t\t(SELECT sao.SpecificationAttributeId FROM Product_SpecificationAttribute_Mapping psm1  \t\tINNER JOIN SpecificationAttributeOption sao1 ON sao1.Id = psm1.SpecificationAttributeOptionId  \t\tINNER JOIN #FilteredSpecificationAttributeOptions fs ON fs.SpecificationAttributeOptionId = sao.Id  \t\tWHERE psm1.ProductId = psm.ProductId)  \t\t  \t\t \t\tIF @ProductAttributesCount > 0  \t\tBEGIN  \t\t\tDELETE #PotentialProductSpecificationAttributeIds  \t\t\tFROM #PotentialProductSpecificationAttributeIds ppsa  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = ppsa.ProductId  \t\t\tWHERE   \t\t\t(  \t\t\t\tpibfa.ChildProductId = 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\tOR  \t\t\t(  \t\t\t\tpibfa.ChildProductId != 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\tEND  \t\t  \t\t \t\tIF @ManufacturersCount > 0  \t\tBEGIN  \t\t\tDELETE FROM #PotentialProductSpecificationAttributeIds  \t\t\tWHERE NOT EXISTS (  \t\t\t\tSELECT NULL FROM Product_Manufacturer_Mapping [pmm]   \t\t\t\tINNER JOIN #FilteredManufacturers [fm] ON [fm].ManufacturerId = [pmm].ManufacturerId  \t\t\t\tWHERE [pmm].ProductId = #PotentialProductSpecificationAttributeIds.ProductId)  \t\tEND  \t\t  \t\t \t\tIF @VendorsCount > 0  \t\tBEGIN  \t\t\tDELETE FROM #PotentialProductSpecificationAttributeIds  \t\t\tWHERE NOT EXISTS (  \t\t\t\tSELECT NULL FROM Product [p]   \t\t\t\tINNER JOIN #FilteredVendorIds [fv] ON [fv].VendorId = [p].VendorId  \t\t\t\tWHERE [p].Id = #PotentialProductSpecificationAttributeIds.ProductId)  \t\tEND  \t\t  \t\t  \t\t \t\t  \t\tCREATE TABLE #FilterableSpecs   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[SpecificationAttributeOptionId] int NOT NULL  \t\t)  \t\t  \t\tCREATE TABLE #FilterableSpecsDistinct   \t\t(  \t\t\t[SpecificationAttributeOptionId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\tINSERT INTO #FilterableSpecs ([ProductId], [SpecificationAttributeOptionId])  \t\tSELECT DISTINCT [psam].ProductId, [psam].SpecificationAttributeOptionId  \t\tFROM [Product_SpecificationAttribute_Mapping] [psam] with (NOLOCK)  \t\tWHERE [psam].[ProductId] IN (SELECT [pi].ProductId FROM #PageIndex [pi]) AND [psam].[AllowFiltering] = 1  \t\t  \t\t \t\t \t\t \t\t \t\t \t\t \t\t \t\t  \t\tINSERT INTO #FilterableSpecs ([ProductId], [SpecificationAttributeOptionId])  \t\tSELECT DISTINCT ProductId, SpecificationAttributeOptionId  \t\tFROM #PotentialProductSpecificationAttributeIds  \t\t  \t\tINSERT INTO #FilterableSpecsDistinct ([SpecificationAttributeOptionId])  \t\tSELECT DISTINCT SpecificationAttributeOptionId  \t\tFROM #FilterableSpecs    \t\t \t\tSELECT @FilterableSpecificationAttributeOptionIds = COALESCE(@FilterableSpecificationAttributeOptionIds + ',' , '') + CAST(SpecificationAttributeOptionId as nvarchar(4000))  \t\tFROM #FilterableSpecsDistinct  \t\t  \t\t \t\t  \t\tCREATE TABLE #PotentialProductVariantAttributeIds   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[ProductVariantAttributeId] int NOT NULL  \t\t)    \t\tCREATE INDEX IX_PotentialProductVariantAttributeIds_ProductId  \t\tON #PotentialProductVariantAttributeIds (ProductId);  \t\t  \t\t \t\t \t\t \t\t \t\t   \t\tINSERT INTO #PotentialProductVariantAttributeIds ([ProductId], [ProductVariantAttributeId])  \t\tSELECT [ppm].ProductId, [ppm].Id  \t\tFROM Product_ProductAttribute_Mapping [ppm]  \t\tINNER JOIN #FilteredProductAttributesToProduct fpatp ON fpatp.ProductId = [ppm].ProductId  \t\tINNER JOIN #FilteredProductAttributes fa ON fa.AttributeId = ppm.ProductAttributeId  \t\tWHERE fpatp.AttributesCount = @ProductAttributesCount - 1 AND   \t\t[ppm].Id NOT IN (SELECT ProductVariantAttributeId FROM #FilteredProductVariantAttributes)    \t\t \t\t \t\tIF @SpecificationAttributesCount > 0  \t\tBEGIN    \t\t\tDELETE #PotentialProductVariantAttributeIds  \t\t\tFROM #PotentialProductVariantAttributeIds ppva  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = ppva.ProductId OR pibfa.ChildProductId = ppva.ProductId  \t\t\tWHERE   \t\t\t(  \t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredSpecificationAttributesToProduct WHERE ProductId = pibfa.ProductId)  \t\t\t\tOR  \t\t\t\t(SELECT AttributesCount FROM #FilteredSpecificationAttributesToProduct WHERE ProductId = pibfa.ProductId) != @SpecificationAttributesCount  \t\t\t)    \t\tEND  \t\t  \t\t \t\tIF @ManufacturersCount > 0  \t\tBEGIN  \t\t\tDELETE FROM #PotentialProductVariantAttributeIds  \t\t\tWHERE NOT EXISTS (  \t\t\t\tSELECT NULL FROM Product_Manufacturer_Mapping pmm  \t\t\t\tINNER JOIN #FilteredManufacturers fm ON fm.ManufacturerId = pmm.ManufacturerId  \t\t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = pmm.ProductId  \t\t\t\tWHERE #PotentialProductVariantAttributeIds.ProductId = pibfa.ProductId OR #PotentialProductVariantAttributeIds.ProductId = pibfa.ChildProductId)  \t\tEND  \t\t  \t\t \t\t \t\tIF @VendorsCount > 0  \t\tBEGIN  \t\t\tDELETE FROM #PotentialProductVariantAttributeIds  \t\t\tWHERE NOT EXISTS (  \t\t\t\tSELECT NULL FROM Product [p]   \t\t\t\tINNER JOIN #FilteredVendorIds [fv] ON [fv].VendorId = [p].VendorId  \t\t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied ON #PotentialProductVariantAttributeIds.ProductId = #ProductIdsBeforeFiltersApplied.ProductId  \t\t\t\tOR #PotentialProductVariantAttributeIds.ProductId = #ProductIdsBeforeFiltersApplied.ChildProductId  \t\t\t\tWHERE [p].Id = #ProductIdsBeforeFiltersApplied.ProductId OR [p].Id = #ProductIdsBeforeFiltersApplied.ChildProductId)  \t\tEND  \t\t  \t\tCREATE TABLE #FilterableProductVariantIds   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[ProductVariantAttributeId] int NOT NULL  \t\t)  \t\t  \t\tCREATE TABLE #FilterableProductVariantIdsDistinct   \t\t(  \t\t\t[ProductVariantAttributeId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\tINSERT INTO #FilterableProductVariantIds ([ProductId], [ProductVariantAttributeId])  \t\tSELECT DISTINCT [ppm].ProductId, [ppm].Id  \t\tFROM [Product_ProductAttribute_Mapping] [ppm]  \t\tINNER JOIN #PageIndex [pi] ON [pi].ProductId = [ppm].[ProductId] OR [pi].ChildProductId = [ppm].ProductId  \t\t  \t\t \t\tINSERT INTO #FilterableProductVariantIds ([ProductId], [ProductVariantAttributeId])  \t\tSELECT DISTINCT ProductId, ProductVariantAttributeId  \t\tFROM #PotentialProductVariantAttributeIds  \t\t  \t\tINSERT INTO #FilterableProductVariantIdsDistinct ([ProductVariantAttributeId])  \t\tSELECT DISTINCT ProductVariantAttributeId  \t\tFROM #FilterableProductVariantIds  \t\t  \t\t \t\tSELECT @FilterableProductVariantAttributeIds = COALESCE(@FilterableProductVariantAttributeIds + ',' , '') + CAST(ProductVariantAttributeId as nvarchar(4000))  \t\tFROM #FilterableProductVariantIdsDistinct  \t\t  \t\t \t\t  \t\tCREATE TABLE #FilterableManufacturers   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[ManufacturerId] int NOT NULL  \t\t)  \t\t  \t\tCREATE TABLE #FilterableManufacturersDistinct   \t\t(  \t\t\t[ManufacturerId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\tINSERT INTO #FilterableManufacturers ([ProductId], [ManufacturerId])  \t\tSELECT DISTINCT [pmm].ProductId, [pmm].ManufacturerId  \t\tFROM Product_Manufacturer_Mapping [pmm]  \t\tINNER JOIN #ProductIdsBeforeFiltersApplied ON #ProductIdsBeforeFiltersApplied.ProductId = [pmm].ProductId  \t\t  \t\t \t\tIF @SpecificationAttributesCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableManufacturers  \t\t\tFROM #FilterableManufacturers fm  \t\t\tLEFT JOIN #FilteredSpecificationAttributesToProduct fsatp ON fsatp.ProductId = fm.ProductId  \t\t\tWHERE fsatp.ProductId IS NULL OR fsatp.AttributesCount != @SpecificationAttributesCount  \t\t\t  \t\tEND  \t\t  \t\t \t\tIF @ProductAttributesCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableManufacturers  \t\t\tFROM #FilterableManufacturers fm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = fm.ProductId  \t\t\tWHERE   \t\t\t(  \t\t\t\tpibfa.ChildProductId = 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\tOR  \t\t\t(  \t\t\t\tpibfa.ChildProductId != 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\t\t  \t\tEND  \t\t  \t\t \t\tIF @VendorsCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableManufacturers  \t\t\tWHERE NOT EXISTS  \t\t\t(  \t\t\t\tSELECT NULL FROM Product [p]  \t\t\t\tINNER JOIN #FilteredVendorIds [fv] ON fv.VendorId = [p].VendorId  \t\t\t\tWHERE [p].Id = #FilterableManufacturers.ProductId  \t\t\t)  \t\t\t  \t\tEND  \t\t  \t\tINSERT INTO #FilterableManufacturersDistinct ([ManufacturerId])  \t\tSELECT DISTINCT ManufacturerId  \t\tFROM #FilterableManufacturers  \t\t  \t\t \t\tSELECT @FilterableManufacturerIds = COALESCE(@FilterableManufacturerIds + ',' , '') + CAST(ManufacturerId as nvarchar(4000))  \t\tFROM #FilterableManufacturersDistinct  \t\t  \t\t \t\tCREATE TABLE #FilterableVendors   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[VendorId] int NOT NULL  \t\t)  \t\t  \t\tCREATE TABLE #FilterableVendorsDistinct   \t\t(  \t\t\t[VendorId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\tINSERT INTO #FilterableVendors ([ProductId], [VendorId])  \t\tSELECT DISTINCT [pv].Id, [pv].VendorId  \t\tFROM Product [pv]  \t\tINNER JOIN #ProductIdsBeforeFiltersApplied ON #ProductIdsBeforeFiltersApplied.ProductId = [pv].Id    \t\t \t\tIF @SpecificationAttributesCount > 0  \t\tBEGIN    \t\t\tDELETE FROM #FilterableVendors  \t\t\tFROM #FilterableVendors fv  \t\t\tLEFT JOIN #FilteredSpecificationAttributesToProduct fsatp ON fsatp.ProductId = fv.ProductId  \t\t\tWHERE fsatp.ProductId IS NULL OR fsatp.AttributesCount != @SpecificationAttributesCount  \t\t\t  \t\tEND  \t\t  \t\t \t\t \t\t \t\t \t\tIF @ProductAttributesCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableVendors  \t\t\tFROM #FilterableVendors fv  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = fv.ProductId  \t\t\tWHERE   \t\t\t(  \t\t\t\tpibfa.ChildProductId = 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\tOR  \t\t\t(  \t\t\t\tpibfa.ChildProductId != 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\t\t  \t\tEND  \t\t  \t\t \t\tIF @ManufacturersCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableVendors  \t\t\tWHERE NOT EXISTS  \t\t\t(  \t\t\t\tSELECT NULL FROM Product_Manufacturer_Mapping [pmm]  \t\t\t\tINNER JOIN #FilteredManufacturers [fm] ON [fm].ManufacturerId = [pmm].ManufacturerId  \t\t\t\tWHERE [pmm].ProductId = #FilterableVendors.ProductId  \t\t\t)  \t\t\t  \t\tEND  \t\t  \t\tINSERT INTO #FilterableVendorsDistinct ([VendorId])  \t\tSELECT DISTINCT VendorId  \t\tFROM #FilterableVendors    \t\t \t\tSELECT @FilterableVendorIds = COALESCE(@FilterableVendorIds + ',' , '') + CAST(VendorId as nvarchar(4000))  \t\tFROM #FilterableVendorsDistinct  \t\t  \t\tDROP TABLE #ProductIdsBeforeFiltersApplied  \t\tDROP TABLE #FilteredSpecificationAttributeOptions  \t\tDROP TABLE #FilterableSpecs  \t\tDROP TABLE #FilteredSpecificationAttributes  \t\tDROP TABLE #FilteredSpecificationAttributesToProduct  \t\tDROP TABLE #FilterableSpecsDistinct  \t\tDROP TABLE #PotentialProductSpecificationAttributeIds  \t\tDROP TABLE #FilteredProductVariantAttributes  \t\tDROP TABLE #FilteredProductAttributes  \t\tDROP TABLE #FilteredProductAttributesToProduct  \t\tDROP TABLE #FilterableProductVariantIds  \t\tDROP TABLE #FilterableProductVariantIdsDistinct  \t\tDROP TABLE #PotentialProductVariantAttributeIds  \t\tDROP TABLE #FilteredManufacturers  \t\tDROP TABLE #FilterableManufacturers  \t\tDROP TABLE #FilterableVendors  \t\tDROP TABLE #FilterableVendorsDistinct  \t\tDROP TABLE #FilterableManufacturersDistinct  \t\t   \tEND   \t   \t  \tDELETE #PageIndex   \tFROM #PageIndex  \tLEFT OUTER JOIN (  \t   SELECT MIN(IndexId) as RowId, ProductId   \t   FROM #PageIndex   \t   GROUP BY ProductId  \t) AS KeepRows ON  \t   #PageIndex.IndexId = KeepRows.RowId  \tWHERE  \t   KeepRows.RowId IS NULL  \t     \tSET @TotalRecords = @TotalRecords - @@rowcount   \t   \t  \t  \t  \t  \t   \tCREATE TABLE #PageIndexDistinct   \t(  \t\t[IndexId] int IDENTITY (1, 1) NOT NULL,  \t\t[ProductId] int NOT NULL  \t)  \t  \tINSERT INTO #PageIndexDistinct ([ProductId])  \tSELECT [ProductId]  \tFROM #PageIndex  \tORDER BY [IndexId]  \t  \tIF @IsOnSaleFilterEnabled = 1  \tBEGIN  \t\t \t\tIF EXISTS (SELECT NULL FROM Product p   \t\t\t\t  LEFT JOIN Product cp ON p.Id = cp.ParentGroupedProductId   \t\t\t\t  INNER JOIN #PageIndexDistinct [pid] ON [pid].ProductId = p.Id  \t\t\t\t  WHERE (  \t\t\t\t\t\t\t(cp.Id IS NULL AND p.OldPrice > 0 AND p.Price != p.OldPrice)  \t\t\t\t\t\t\tOR  \t\t\t\t\t\t\t(cp.Id IS NOT NULL AND cp.OldPrice > 0 AND cp.OldPrice != cp.Price)  \t\t\t\t\t\t)   \t\t\t\t  )  \t\tBEGIN  \t\t\tSET @HasProductsOnSale = 1  \t\tEND  \t\tELSE  \t\t\tSET @HasProductsOnSale = 0  \tEND  \t  \tIF @IsInStockFilterEnabled = 1  \tBEGIN  \t \t\tIF EXISTS (SELECT NULL FROM Product p   \t\t\t\tLEFT JOIN Product cp ON p.Id = cp.ParentGroupedProductId   \t\t\t\tINNER JOIN #PageIndexDistinct [pid] ON [pid].ProductId = p.Id  \t\t\t\tWHERE (  \t\t\t\t\t\t(cp.ID IS NULL  AND   \t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t(p.ManageInventoryMethodId = 0) OR  \t\t\t\t\t\t\t\t\t(P.ManageInventoryMethodId = 1 AND  \t\t\t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t\t\t(p.StockQuantity > 0 AND p.UseMultipleWarehouses = 0) OR   \t\t\t\t\t\t\t\t\t\t(EXISTS(SELECT 1 FROM ProductWarehouseInventory [pwi] WHERE\t[pwi].ProductId = p.Id\tAND [pwi].StockQuantity > 0 AND [pwi].StockQuantity > [pwi].ReservedQuantity) AND p.UseMultipleWarehouses = 1)  \t\t\t\t\t\t\t\t\t)  \t\t\t\t\t\t\t\t)  \t\t\t\t\t\t\t)  \t\t\t\t\t\t)  \t\t\t\t\t\tOR  \t\t\t\t\t\t(p.Id IS NOT NULL AND   \t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t(cp.ManageInventoryMethodId = 0) OR  \t\t\t\t\t\t\t\t(cp.ManageInventoryMethodId = 1 AND  \t\t\t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t\t\t(cp.StockQuantity > 0 AND cp.UseMultipleWarehouses = 0) OR   \t\t\t\t\t\t\t\t\t\t(EXISTS(SELECT 1 FROM ProductWarehouseInventory [pwi] WHERE [pwi].ProductId = cp.Id\tAND [pwi].StockQuantity > 0 AND [pwi].StockQuantity > [pwi].ReservedQuantity) AND cp.UseMultipleWarehouses = 1)  \t\t\t\t\t\t\t\t\t)  \t\t\t\t\t\t\t\t)  \t\t\t\t\t\t\t)  \t\t\t\t\t\t)  \t\t\t\t\t)  \t\t\t\t)  \t\tBEGIN  \t\t\tSET @HasProductsInStock = 1  \t\tEND  \t\tELSE  \t\t\tSET @HasProductsInStock = 0  \tEND    \tSELECT TOP (@RowsToReturn)  \t\tp.*  \tFROM  \t\t#PageIndexDistinct [pi]  \t\tINNER JOIN Product p with (NOLOCK) on p.Id = [pi].[ProductId]  \tWHERE  \t\t[pi].IndexId > @PageLowerBound AND   \t\t[pi].IndexId < @PageUpperBound  \tORDER BY  \t\t[pi].IndexId  \t  \tDROP TABLE #KeywordProducts  \tDROP TABLE #FilteredCategoryIds  \tDROP TABLE #FilteredVendorIds  \tDROP TABLE #FilteredCustomerRoleIds  \tDROP TABLE #DisplayOrderTmp  \tDROP TABLE #PageIndex  \tDROP TABLE #PageIndexDistinct    \t  END";

        private string SqlUnencrypred = "CREATE PROCEDURE [dbo].[ProductLoadAllPagedNopAjaxFilters]  (  \t@CategoryIds\t\tnvarchar(MAX) = null,\t \t@ManufacturerId\t\tint = 0,  \t@StoreId\t\t\tint = 0,  \t@VendorId\t\t\tint = 0,  \t@ParentGroupedProductId\tint = 0,  \t@ProductTypeId\t\tint = null,  \t@VisibleIndividuallyOnly bit = 0, \t \t@ProductTagId\t\tint = 0,  \t@FeaturedProducts\tbit = null,\t \t@PriceMin\t\t\tdecimal(18, 4) = null,  \t@PriceMax\t\t\tdecimal(18, 4) = null,  \t@Keywords\t\t\tnvarchar(4000) = null,  \t@SearchDescriptions bit = 0,  \t@SearchManufacturerPartNumber bit = 0,  \t@SearchSku\t\t\tbit = 0,  \t@SearchProductTags  bit = 0,  \t@UseFullTextSearch  bit = 0,  \t@FullTextMode\t\tint = 0,  \t@FilteredSpecs\t\tnvarchar(MAX) = null,\t \t@FilteredProductVariantAttributes\t\tnvarchar(MAX) = null,  \t@FilteredManufacturers\t\tnvarchar(MAX) = null,  \t@FilteredVendors\tnvarchar(MAX) = null,  \t@OnSale\t\t\t\tbit = 0,  \t@InStock\t\t\tbit = 0,  \t@LanguageId\t\t\tint = 0,  \t@OrderBy\t\t\tint = 0,  \t@AllowedCustomerRoleIds\tnvarchar(MAX) = null,\t \t@PageIndex\t\t\tint = 0,   \t@PageSize\t\t\tint = 2147483644,  \t@ShowHidden\t\t\tbit = 0,  \t@LoadAvailableFilters bit = 0,  \t@FilterableSpecificationAttributeOptionIds nvarchar(MAX) = null OUTPUT,  \t@FilterableProductVariantAttributeIds nvarchar(MAX) = null OUTPUT,  \t@FilterableManufacturerIds nvarchar(MAX) = null OUTPUT,  \t@FilterableVendorIds nvarchar(MAX) = null OUTPUT,  \t@IsOnSaleFilterEnabled \tbit = 0,  \t@IsInStockFilterEnabled bit = 0,  \t@HasProductsOnSale\tbit = 0 OUTPUT,  \t@HasProductsInStock\tbit = 0 OUTPUT,  \t@TotalRecords\t\tint = null OUTPUT  )    AS  BEGIN  \t  \t \t \t \t \t  \t    \t  \tCREATE TABLE #KeywordProducts  \t(  \t\t[ProductId] int NOT NULL  \t)    \tDECLARE  \t\t@SearchKeywords bit,  \t\t@OriginalKeywords nvarchar(4000),  \t\t@sql nvarchar(max),  \t\t@sqlWithoutFilters nvarchar(max),  \t\t@sql_orderby nvarchar(max)    \tSET NOCOUNT ON  \t  \t \tSET @Keywords = isnull(@Keywords, '')  \tSET @Keywords = rtrim(ltrim(@Keywords))  \tSET @OriginalKeywords = @Keywords  \tIF ISNULL(@Keywords, '') != ''  \tBEGIN  \t\tSET @SearchKeywords = 1  \t\t  \t\tIF @UseFullTextSearch = 1  \t\tBEGIN  \t\t\t \t\t\tSET @Keywords = REPLACE(@Keywords, '''', '')  \t\t\tSET @Keywords = REPLACE(@Keywords, '\"', '')  \t\t\t  \t\t\t \t\t\tIF @FullTextMode = 0   \t\t\tBEGIN  \t\t\t\t \t\t\t\tSET @Keywords = ' \"' + @Keywords + '*\" '  \t\t\tEND  \t\t\tELSE  \t\t\tBEGIN  \t\t\t\t \t\t\t\t   \t\t\t\t \t\t\t\tWHILE CHARINDEX('  ', @Keywords) > 0   \t\t\t\t\tSET @Keywords = REPLACE(@Keywords, '  ', ' ')    \t\t\t\tDECLARE @concat_term nvarchar(100)\t\t\t\t  \t\t\t\tIF @FullTextMode = 5  \t\t\t\tBEGIN  \t\t\t\t\tSET @concat_term = 'OR'  \t\t\t\tEND   \t\t\t\tIF @FullTextMode = 10  \t\t\t\tBEGIN  \t\t\t\t\tSET @concat_term = 'AND'  \t\t\t\tEND    \t\t\t\t \t\t\t\tdeclare @fulltext_keywords nvarchar(4000)  \t\t\t\tset @fulltext_keywords = N''  \t\t\t\tdeclare @index int\t\t  \t\t  \t\t\t\tset @index = CHARINDEX(' ', @Keywords, 0)    \t\t\t\t \t\t\t\tIF(@index = 0)  \t\t\t\t\tset @fulltext_keywords = ' \"' + @Keywords + '*\" '  \t\t\t\tELSE  \t\t\t\tBEGIN\t\t  \t\t\t\t\tDECLARE @first BIT  \t\t\t\t\tSET  @first = 1\t\t\t  \t\t\t\t\tWHILE @index > 0  \t\t\t\t\tBEGIN  \t\t\t\t\t\tIF (@first = 0)  \t\t\t\t\t\t\tSET @fulltext_keywords = @fulltext_keywords + ' ' + @concat_term + ' '  \t\t\t\t\t\tELSE  \t\t\t\t\t\t\tSET @first = 0    \t\t\t\t\t\tSET @fulltext_keywords = @fulltext_keywords + '\"' + SUBSTRING(@Keywords, 1, @index - 1) + '*\"'\t\t\t\t\t  \t\t\t\t\t\tSET @Keywords = SUBSTRING(@Keywords, @index + 1, LEN(@Keywords) - @index)\t\t\t\t\t\t  \t\t\t\t\t\tSET @index = CHARINDEX(' ', @Keywords, 0)  \t\t\t\t\tend  \t\t\t\t\t  \t\t\t\t\t \t\t\t\t\tIF LEN(@fulltext_keywords) > 0  \t\t\t\t\t\tSET @fulltext_keywords = @fulltext_keywords + ' ' + @concat_term + ' ' + '\"' + SUBSTRING(@Keywords, 1, LEN(@Keywords)) + '*\"'\t  \t\t\t\tEND  \t\t\t\tSET @Keywords = @fulltext_keywords  \t\t\tEND  \t\tEND  \t\tELSE  \t\tBEGIN  \t\t\t \t\t\tSET @Keywords = '%' + @Keywords + '%'  \t\tEND  \t\t   \t\t \t\tSET @sql = '  \t\tINSERT INTO #KeywordProducts ([ProductId])  \t\tSELECT p.Id  \t\tFROM Product p with (NOLOCK)  \t\tWHERE '  \t\tIF @UseFullTextSearch = 1  \t\t\tSET @sql = @sql + 'CONTAINS(p.[Name], @Keywords) '  \t\tELSE  \t\t\tSET @sql = @sql + 'PATINDEX(@Keywords, p.[Name]) > 0 '      \t\t \t\tSET @sql = @sql + '  \t\tUNION  \t\tSELECT lp.EntityId  \t\tFROM LocalizedProperty lp with (NOLOCK)  \t\tWHERE  \t\t\tlp.LocaleKeyGroup = N''Product''  \t\t\tAND lp.LanguageId = ' + ISNULL(CAST(@LanguageId AS nvarchar(max)), '0') + '  \t\t\tAND lp.LocaleKey = N''Name'''  \t\tIF @UseFullTextSearch = 1  \t\t\tSET @sql = @sql + ' AND CONTAINS(lp.[LocaleValue], @Keywords) '  \t\tELSE  \t\t\tSET @sql = @sql + ' AND PATINDEX(@Keywords, lp.[LocaleValue]) > 0 '  \t    \t\tIF @SearchDescriptions = 1  \t\tBEGIN  \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT p.Id  \t\t\tFROM Product p with (NOLOCK)  \t\t\tWHERE '  \t\t\tIF @UseFullTextSearch = 1  \t\t\t\tSET @sql = @sql + 'CONTAINS(p.[ShortDescription], @Keywords) '  \t\t\tELSE  \t\t\t\tSET @sql = @sql + 'PATINDEX(@Keywords, p.[ShortDescription]) > 0 '      \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT p.Id  \t\t\tFROM Product p with (NOLOCK)  \t\t\tWHERE '  \t\t\tIF @UseFullTextSearch = 1  \t\t\t\tSET @sql = @sql + 'CONTAINS(p.[FullDescription], @Keywords) '  \t\t\tELSE  \t\t\t\tSET @sql = @sql + 'PATINDEX(@Keywords, p.[FullDescription]) > 0 '        \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT lp.EntityId  \t\t\tFROM LocalizedProperty lp with (NOLOCK)  \t\t\tWHERE  \t\t\t\tlp.LocaleKeyGroup = N''Product''  \t\t\t\tAND lp.LanguageId = ' + ISNULL(CAST(@LanguageId AS nvarchar(max)), '0') + '  \t\t\t\tAND lp.LocaleKey = N''ShortDescription'''  \t\t\tIF @UseFullTextSearch = 1  \t\t\t\tSET @sql = @sql + ' AND CONTAINS(lp.[LocaleValue], @Keywords) '  \t\t\tELSE  \t\t\t\tSET @sql = @sql + ' AND PATINDEX(@Keywords, lp.[LocaleValue]) > 0 '  \t\t\t\t    \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT lp.EntityId  \t\t\tFROM LocalizedProperty lp with (NOLOCK)  \t\t\tWHERE  \t\t\t\tlp.LocaleKeyGroup = N''Product''  \t\t\t\tAND lp.LanguageId = ' + ISNULL(CAST(@LanguageId AS nvarchar(max)), '0') + '  \t\t\t\tAND lp.LocaleKey = N''FullDescription'''  \t\t\tIF @UseFullTextSearch = 1  \t\t\t\tSET @sql = @sql + ' AND CONTAINS(lp.[LocaleValue], @Keywords) '  \t\t\tELSE  \t\t\t\tSET @sql = @sql + ' AND PATINDEX(@Keywords, lp.[LocaleValue]) > 0 '  \t\tEND  \t\t  \t\t \t\tIF @SearchManufacturerPartNumber = 1  \t\tBEGIN  \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT p.Id  \t\t\tFROM Product p with (NOLOCK)  \t\t\tWHERE p.[ManufacturerPartNumber] = @OriginalKeywords '  \t\tEND    \t\t \t\tIF @SearchSku = 1  \t\tBEGIN  \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT p.Id  \t\t\tFROM Product p with (NOLOCK)  \t\t\tWHERE p.[Sku] = @OriginalKeywords '  \t\tEND    \t\tIF @SearchProductTags = 1  \t\tBEGIN  \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT pptm.Product_Id  \t\t\tFROM Product_ProductTag_Mapping pptm with(NOLOCK) INNER JOIN ProductTag pt with(NOLOCK) ON pt.Id = pptm.ProductTag_Id  \t\t\tWHERE pt.[Name] = @OriginalKeywords '    \t\t\t \t\t\tSET @sql = @sql + '  \t\t\tUNION  \t\t\tSELECT pptm.Product_Id  \t\t\tFROM LocalizedProperty lp with (NOLOCK) INNER JOIN Product_ProductTag_Mapping pptm with(NOLOCK) ON lp.EntityId = pptm.ProductTag_Id  \t\t\tWHERE  \t\t\t\tlp.LocaleKeyGroup = N''ProductTag''  \t\t\t\tAND lp.LanguageId = ' + ISNULL(CAST(@LanguageId AS nvarchar(max)), '0') + '  \t\t\t\tAND lp.LocaleKey = N''Name''  \t\t\t\tAND lp.[LocaleValue] = @OriginalKeywords '  \t\tEND    \t\t \t\tEXEC sp_executesql @sql, N'@Keywords nvarchar(4000), @OriginalKeywords nvarchar(4000)', @Keywords, @OriginalKeywords    \tEND  \tELSE  \tBEGIN  \t\tSET @SearchKeywords = 0  \tEND    \t \tSET @CategoryIds = isnull(@CategoryIds, '')\t  \tCREATE TABLE #FilteredCategoryIds  \t(  \t\tCategoryId int not null  \t)  \tINSERT INTO #FilteredCategoryIds (CategoryId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@CategoryIds, ',')\t  \tDECLARE @CategoryIdsCount int\t  \tSET @CategoryIdsCount = (SELECT COUNT(1) FROM #FilteredCategoryIds)    \t \tSET @FilteredSpecs = isnull(@FilteredSpecs, '')\t  \tCREATE TABLE #FilteredSpecificationAttributeOptions  \t(  \t\tSpecificationAttributeOptionId int not null unique  \t)    \tINSERT INTO #FilteredSpecificationAttributeOptions (SpecificationAttributeOptionId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@FilteredSpecs, ',')    \tDECLARE @SpecificationAttributesCount int\t  \tSET @SpecificationAttributesCount =   \t(  \t\tSELECT COUNT(DISTINCT sao.SpecificationAttributeId) FROM #FilteredSpecificationAttributeOptions fs   \t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = fs.SpecificationAttributeOptionId   \t)    \tCREATE TABLE #FilteredSpecificationAttributes  \t(  \t\tAttributeId int not null  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_#FilteredSpecificationAttributes_AttributeId  \tON #FilteredSpecificationAttributes (AttributeId);    \tINSERT INTO #FilteredSpecificationAttributes  \tSELECT DISTINCT sap.SpecificationAttributeId  \tFROM SpecificationAttributeOption sap  \tINNER JOIN #FilteredSpecificationAttributeOptions fs ON fs.SpecificationAttributeOptionId = sap.Id  \t  \t \tSET @FilteredProductVariantAttributes = isnull(@FilteredProductVariantAttributes, '')\t  \tCREATE TABLE #FilteredProductVariantAttributes  \t(  \t\tProductVariantAttributeId int not null  \t)    \tCREATE INDEX IX_FilteredProductVariantAttributes_ProductVariantAttributeId  \tON #FilteredProductVariantAttributes (ProductVariantAttributeId);     \tINSERT INTO #FilteredProductVariantAttributes (ProductVariantAttributeId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@FilteredProductVariantAttributes, ',')    \tDECLARE @ProductAttributesCount int\t  \tSET @ProductAttributesCount =   \t(  \t\tSELECT COUNT(DISTINCT ppm.ProductAttributeId) FROM #FilteredProductVariantAttributes fpva   \t\tINNER JOIN Product_ProductAttribute_Mapping ppm ON ppm.Id = fpva.ProductVariantAttributeId   \t)    \tCREATE TABLE #FilteredProductAttributes  \t(  \t\tAttributeId int not null  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_#FilteredAttributes_AttributeId  \tON #FilteredProductAttributes (AttributeId);    \tINSERT INTO #FilteredProductAttributes  \tSELECT DISTINCT ProductAttributeId  \tFROM Product_ProductAttribute_Mapping ppm  \tINNER JOIN #FilteredProductVariantAttributes fpv ON fpv.ProductVariantAttributeId = ppm.Id  \t  \t \tSET @FilteredManufacturers = isnull(@FilteredManufacturers, '')\t  \tCREATE TABLE #FilteredManufacturers  \t(  \t\tManufacturerId int not null  \t)  \tINSERT INTO #FilteredManufacturers (ManufacturerId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@FilteredManufacturers, ',')  \tDECLARE @ManufacturersCount int\t  \tSET @ManufacturersCount = (SELECT COUNT(1) FROM #FilteredManufacturers)  \t  \t \tSET @FilteredVendors = isnull(@FilteredVendors, '')\t  \tCREATE TABLE #FilteredVendorIds  \t(  \t\tVendorId int not null  \t)  \tINSERT INTO #FilteredVendorIds (VendorId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@FilteredVendors, ',')\t\t  \tDECLARE @VendorsCount int\t  \tSET @VendorsCount = (SELECT COUNT(1) FROM #FilteredVendorIds)    \t \tSET @AllowedCustomerRoleIds = isnull(@AllowedCustomerRoleIds, '')\t  \tCREATE TABLE #FilteredCustomerRoleIds  \t(  \t\tCustomerRoleId int not null  \t)  \tINSERT INTO #FilteredCustomerRoleIds (CustomerRoleId)  \tSELECT CAST(data as int) FROM [dbo].[nop_splitstring_to_table](@AllowedCustomerRoleIds, ',')  \tDECLARE @FilteredCustomerRoleIdsCount int\t  \tSET @FilteredCustomerRoleIdsCount = (SELECT COUNT(1) FROM #FilteredCustomerRoleIds)  \t\t  \t \tDECLARE @PageLowerBound int  \tDECLARE @PageUpperBound int  \tDECLARE @RowsToReturn int  \tSET @RowsToReturn = @PageSize * (@PageIndex + 1)\t  \tSET @PageLowerBound = @PageSize * @PageIndex  \tSET @PageUpperBound = @PageLowerBound + @PageSize + 1  \t  \tCREATE TABLE #DisplayOrderTmp   \t(  \t\t[Id] int IDENTITY (1, 1) NOT NULL,  \t\t[ProductId] int NOT NULL,  \t\t[ChildProductId] int  \t)    \t \t \tSET @sql = '  \tINSERT INTO #DisplayOrderTmp ([ProductId], [ChildProductId])  \tSELECT p.Id, ISNULL(cp.Id, 0)  \tFROM  \t\tProduct p with (NOLOCK)  \t\tLEFT JOIN Product cp with (NOLOCK)  \t\tON p.Id = cp.ParentGroupedProductId'  \t  \tIF @CategoryIdsCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tLEFT JOIN Product_Category_Mapping pcm with (NOLOCK)  \t\t\tON p.Id = pcm.ProductId'  \tEND  \t  \tIF @ManufacturerId > 0 OR @ManufacturersCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tLEFT JOIN Product_Manufacturer_Mapping pmm with (NOLOCK)  \t\t\tON p.Id = pmm.ProductId'  \tEND  \t  \tIF ISNULL(@ProductTagId, 0) != 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tLEFT JOIN Product_ProductTag_Mapping pptm with (NOLOCK)  \t\t\tON p.Id = pptm.Product_Id'  \tEND  \t  \t \tIF @SearchKeywords = 1  \tBEGIN  \t\tSET @sql = @sql + '  \t\tJOIN #KeywordProducts kp  \t\t\tON  p.Id = kp.ProductId'  \tEND  \t  \tSET @sql = @sql + '  \tWHERE  \t\tp.Deleted = 0'  \t\t  \tSET @sql = @sql + '  \tAND  \t\t(p.ParentGroupedProductId = 0 OR p.VisibleIndividually = 1)'  \t  \t \tIF @CategoryIdsCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND pcm.CategoryId IN (SELECT CategoryId FROM #FilteredCategoryIds)'  \t\t  \t\tIF @FeaturedProducts IS NOT NULL  \t\tBEGIN  \t\t\tSET @sql = @sql + '  \t\tAND pcm.IsFeaturedProduct = ' + CAST(@FeaturedProducts AS nvarchar(max))  \t\tEND  \tEND  \t  \t \tIF @ManufacturerId > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND pmm.ManufacturerId = ' + CAST(@ManufacturerId AS nvarchar(max))  \t\t  \t\tIF @FeaturedProducts IS NOT NULL  \t\tBEGIN  \t\t\tSET @sql = @sql + '  \t\tAND pmm.IsFeaturedProduct = ' + CAST(@FeaturedProducts AS nvarchar(max))  \t\tEND  \tEND  \t  \t \tIF @VendorId > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.VendorId = ' + CAST(@VendorId AS nvarchar(max))  \tEND  \t  \t \tIF @ParentGroupedProductId > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.ParentGroupedProductId = ' + CAST(@ParentGroupedProductId AS nvarchar(max))  \tEND  \t  \t \tIF @OnSale = 1  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND   \t\t\t(  \t\t\t\t(cp.ID IS NULL AND p.OldPrice > 0  AND p.OldPrice != p.Price)  \t\t\t  \t\t\tOR  \t\t\t   \t\t\t\t(cp.ID IS NOT NULL AND cp.OldPrice > 0  AND cp.OldPrice != cp.Price)  \t\t\t)'  \tEND  \t \tIF @InStock = 1  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND   \t\t\t(  \t\t\t\t(cp.ID IS NULL  AND   \t\t\t\t\t(  \t\t\t\t\t\t(p.ManageInventoryMethodId = 0) OR  \t\t\t\t\t\t(P.ManageInventoryMethodId = 1 AND  \t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t(p.StockQuantity > 0 AND p.UseMultipleWarehouses = 0) OR   \t\t\t\t\t\t\t\t(EXISTS(SELECT 1 FROM ProductWarehouseInventory [pwi] WHERE\t[pwi].ProductId = p.Id\tAND [pwi].StockQuantity > 0 AND [pwi].StockQuantity > [pwi].ReservedQuantity) AND p.UseMultipleWarehouses = 1)  \t\t\t\t\t\t\t)  \t\t\t\t\t\t)  \t\t\t\t\t)  \t\t\t\t)  \t\t\t\tOR  \t\t\t\t(p.Id IS NOT NULL AND   \t\t\t\t\t(  \t\t\t\t\t\t(cp.ManageInventoryMethodId = 0) OR  \t\t\t\t\t\t(cp.ManageInventoryMethodId = 1 AND  \t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t(cp.StockQuantity > 0 AND cp.UseMultipleWarehouses = 0) OR   \t\t\t\t\t\t\t\t(EXISTS(SELECT 1 FROM ProductWarehouseInventory [pwi] WHERE [pwi].ProductId = cp.Id\tAND [pwi].StockQuantity > 0 AND [pwi].StockQuantity > [pwi].ReservedQuantity) AND cp.UseMultipleWarehouses = 1)  \t\t\t\t\t\t\t)  \t\t\t\t\t\t)  \t\t\t\t\t)  \t\t\t\t)  \t\t\t)'  \tEND  \t \tIF @ProductTypeId is not null  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.ProductTypeId = ' + CAST(@ProductTypeId AS nvarchar(max))  \tEND  \t  \t \tIF @VisibleIndividuallyOnly = 1  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.VisibleIndividually = 1'  \tEND  \t  \t \tIF ISNULL(@ProductTagId, 0) != 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND pptm.ProductTag_Id = ' + CAST(@ProductTagId AS nvarchar(max))  \tEND  \t  \t \tIF @ShowHidden = 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND p.Published = 1  \t\tAND p.Deleted = 0  \t\tAND (getutcdate() BETWEEN ISNULL(p.AvailableStartDateTimeUtc, ''1/1/1900'') and ISNULL(p.AvailableEndDateTimeUtc, ''1/1/2999''))'  \tEND  \t  \t \t \t \tIF @PriceMin > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (  \t\t\t\t(  \t\t\t\t\tcp.Id IS NULL  \t\t\t\t\t  \t\t\t\t\tAND  \t\t\t\t\t  \t\t\t\t\t(p.Price >= ' + CAST(@PriceMin AS nvarchar(max)) + ')  \t\t\t\t)  \t\t\t\tOR  \t\t\t\t(\t  \t\t\t\t\t(cp.Price >= ' + CAST(@PriceMin AS nvarchar(max)) + ')  \t\t\t\t)  \t\t\t)'  \tEND  \t  \t \t \t \tIF @PriceMax > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (  \t\t\t\t(  \t\t\t\t\tcp.Id IS NULL  \t\t\t\t\t  \t\t\t\t\tAND  \t\t\t\t\t  \t\t\t\t\t(p.Price <= ' + CAST(@PriceMax AS nvarchar(max)) + ')  \t\t\t\t)  \t\t\t\tOR  \t\t\t\t(  \t\t\t\t\t(cp.Price <= ' + CAST(@PriceMax AS nvarchar(max)) + ')  \t\t\t\t)  \t\t\t)'  \tEND  \t    \t \tIF @FilteredCustomerRoleIdsCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (p.SubjectToAcl = 0 OR EXISTS (  \t\t\tSELECT 1 FROM #FilteredCustomerRoleIds [fcr]  \t\t\tWHERE  \t\t\t\t[fcr].CustomerRoleId IN (  \t\t\t\t\tSELECT [acl].CustomerRoleId  \t\t\t\t\tFROM [AclRecord] acl with (NOLOCK)  \t\t\t\t\tWHERE [acl].EntityId = p.Id AND [acl].EntityName = ''Product''  \t\t\t\t)  \t\t\t))'  \tEND  \t  \t \tIF @StoreId > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (p.LimitedToStores = 0 OR EXISTS (  \t\t\tSELECT 1 FROM [StoreMapping] sm with (NOLOCK)  \t\t\tWHERE [sm].EntityId = p.Id AND [sm].EntityName = ''Product'' and [sm].StoreId=' + CAST(@StoreId AS nvarchar(max)) + '  \t\t\t))'  \tEND  \t  \t \t \tSET @sqlWithoutFilters = @sql  \t  \t \t \t \t \t \tIF @SpecificationAttributesCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND (  \t\t\t\t(SELECT AttributesCount FROM #FilteredSpecificationAttributesToProduct fsatp  \t\t\t\tWHERE p.Id = fsatp.ProductId) = ' + CAST(@SpecificationAttributesCount AS nvarchar(max)) +   \t\t\t')'  \tEND  \t  \t \t \t \t \t \t  \t \t \t  \tIF @ProductAttributesCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\t\t\tAND (  \t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct fpatp  \t\t\t\tWHERE (cp.Id IS NULL AND p.Id = fpatp.ProductId) OR cp.Id = fpatp.ProductId) = ' + CAST(@ProductAttributesCount AS nvarchar(max)) +   \t\t\t')'  \tEND  \t  \t \tIF @ManufacturersCount > 0  \tBEGIN  \t\tSET @sql = @sql + '  \t\tAND pmm.ManufacturerId IN (SELECT ManufacturerId FROM #FilteredManufacturers)'  \tEND  \t  \t \tIF @VendorsCount > 0  \tBEGIN  \t\t  \t\tSET @sql = @sql + '   \t\tAND p.VendorId IN (SELECT VendorId FROM #FilteredVendorIds)'  \tEND  \t  \t \tSET @sql_orderby = [dbo].[seven_spikes_ajax_filters_product_sorting] (@OrderBy, @CategoryIdsCount, @ManufacturerId, @ParentGroupedProductId)  \t  \tSET @sql = @sql + '  \tORDER BY' + @sql_orderby    \t  \t \t \t \t \t \t \t \t  \tEXEC sp_executesql @sqlWithoutFilters  \t  \tCREATE TABLE #ProductIdsBeforeFiltersApplied   \t(  \t\t[ProductId] int NOT NULL,  \t\t[ChildProductId] int  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_ProductIds_ProductId  \tON #ProductIdsBeforeFiltersApplied (ProductId, ChildProductId);    \tINSERT INTO #ProductIdsBeforeFiltersApplied ([ProductId], [ChildProductId])  \tSELECT ProductId, ChildProductId  \tFROM #DisplayOrderTmp  \tGROUP BY ProductId, ChildProductId  \tORDER BY min([Id])    \t \t   \tDELETE FROM #DisplayOrderTmp    \t \t \t \t \t   \tCREATE TABLE #FilteredSpecificationAttributesToProduct  \t(  \t\tProductId int not null,  \t\tAttributesCount int not null  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_#FilteredSpecificationAttributesToProduct_ProductId  \tON #FilteredSpecificationAttributesToProduct (ProductId)    \tIF @SpecificationAttributesCount > 0  \tBEGIN    \t\t \t\t \t\t   \t\tIF @SpecificationAttributesCount > 1  \t\tBEGIN    \t\t\tINSERT INTO #FilteredSpecificationAttributesToProduct  \t\t\tSELECT psm.ProductId, COUNT (DISTINCT sao.SpecificationAttributeId)  \t\t\tFROM Product_SpecificationAttribute_Mapping psm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = psm.ProductId  \t\t\tINNER JOIN #FilteredSpecificationAttributeOptions fs ON fs.SpecificationAttributeOptionId = psm.SpecificationAttributeOptionId  \t\t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = psm.SpecificationAttributeOptionId  \t\t\tGROUP BY psm.ProductId  \t\t\tHAVING COUNT (DISTINCT sao.SpecificationAttributeId) >= @SpecificationAttributesCount - 1  \t\tEND    \t\tIF @SpecificationAttributesCount = 1  \t\tBEGIN    \t\t\tINSERT INTO #FilteredSpecificationAttributesToProduct  \t\t\tSELECT DISTINCT psm.ProductId, 1  \t\t\tFROM Product_SpecificationAttribute_Mapping psm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = psm.ProductId  \t\t\tINNER JOIN #FilteredSpecificationAttributeOptions fs ON fs.SpecificationAttributeOptionId = psm.SpecificationAttributeOptionId AND psm.AllowFiltering = 1     \t\t\tINSERT INTO #FilteredSpecificationAttributesToProduct  \t\t\tSELECT DISTINCT psm.ProductId, 0  \t\t\tFROM Product_SpecificationAttribute_Mapping psm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = psm.ProductId  \t\t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = psm.SpecificationAttributeOptionId  \t\t\tINNER JOIN #FilteredSpecificationAttributes fsa ON fsa.AttributeId = sao.SpecificationAttributeId  \t\t\tWHERE NOT EXISTS (SELECT NULL FROM #FilteredSpecificationAttributesToProduct fsatp WHERE fsatp.ProductId = psm.ProductId) AND psm.AllowFiltering = 1     \t\tEND      \t\t \t\t \t\t   \t\tIF @SpecificationAttributesCount > 1  \t\tBEGIN    \t\t\tDELETE #FilteredSpecificationAttributesToProduct  \t\t\tFROM #FilteredSpecificationAttributesToProduct fsatp  \t\t\tWHERE (SELECT COUNT (DISTINCT sao.SpecificationAttributeId)  \t\t\tFROM Product_SpecificationAttribute_Mapping psm  \t\t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = psm.SpecificationAttributeOptionId  \t\t\tINNER JOIN #FilteredSpecificationAttributes fsa ON fsa.AttributeId = sao.SpecificationAttributeId  \t\t\tWHERE psm.ProductId = fsatp.ProductId) < @SpecificationAttributesCount    \t\tEND    \tEND    \t \t \t \t \t \t \t   \tCREATE TABLE #FilteredProductAttributesToProduct  \t(  \t\tProductId int not null,  \t\tAttributesCount int not null  \t)    \tCREATE UNIQUE CLUSTERED INDEX IX_#FilteredProductAttributesToProduct_ProductId  \tON #FilteredProductAttributesToProduct (ProductId)    \t \t \t   \tIF @ProductAttributesCount > 0  \tBEGIN    \t\t \t\t \t\t   \t\tIF @ProductAttributesCount > 1  \t\tBEGIN    \t\t\tINSERT INTO #FilteredProductAttributesToProduct  \t\t\tSELECT ppm.ProductId, COUNT (DISTINCT ppm.ProductAttributeId)  \t\t\tFROM Product_ProductAttribute_Mapping ppm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = ppm.ProductId OR p.ChildProductId = ppm.ProductId  \t\t\tINNER JOIN #FilteredProductVariantAttributes fpva ON fpva.ProductVariantAttributeId = ppm.Id  \t\t\tGROUP BY ppm.ProductId  \t\t\tHAVING COUNT(DISTINCT ppm.ProductAttributeId) >= @ProductAttributesCount - 1    \t\tEND    \t\tIF @ProductAttributesCount = 1  \t\tBEGIN    \t\t\tINSERT INTO #FilteredProductAttributesToProduct  \t\t\tSELECT DISTINCT ppm.ProductId, 1  \t\t\tFROM Product_ProductAttribute_Mapping ppm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = ppm.ProductId OR p.ChildProductId = ppm.ProductId  \t\t\tINNER JOIN #FilteredProductVariantAttributes fpva ON fpva.ProductVariantAttributeId = ppm.Id    \t\t\tINSERT INTO #FilteredProductAttributesToProduct  \t\t\tSELECT DISTINCT ppm.ProductId, 0  \t\t\tFROM Product_ProductAttribute_Mapping ppm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied p ON p.ProductId = ppm.ProductId OR p.ChildProductId = ppm.ProductId  \t\t\tINNER JOIN #FilteredProductAttributes fa ON fa.AttributeId = ppm.ProductAttributeId  \t\t\tWHERE ppm.ProductId NOT IN (SELECT ProductId FROM #FilteredProductAttributesToProduct)    \t\tEND    \t\t \t\t \t\t \t\t \t\t \t\t   \t\t \t\t \t\t \t\t \t\t \t\t   \t\t \t\t \t\t   \t\tIF @ProductAttributesCount > 1  \t\tBEGIN    \t\t\tDELETE #FilteredProductAttributesToProduct  \t\t\tFROM #FilteredProductAttributesToProduct fpatp  \t\t\tWHERE (SELECT COUNT(DISTINCT ppm.ProductAttributeId) FROM  \t\t\tProduct_ProductAttribute_Mapping ppm  \t\t\tINNER JOIN #FilteredProductAttributes fa ON fa.AttributeId = ppm.ProductAttributeId  \t\t\tWHERE ppm.ProductId = fpatp.ProductId) < @ProductAttributesCount    \t\tEND    \tEND  \t  \t   \tEXEC sp_executesql @sql    \tCREATE TABLE #PageIndex   \t(  \t\t[IndexId] int IDENTITY (1, 1) NOT NULL,  \t\t[ProductId] int NOT NULL,  \t\t[ChildProductId] int  \t)  \t  \tINSERT INTO #PageIndex ([ProductId], [ChildProductId])  \tSELECT ProductId, ChildProductId  \tFROM #DisplayOrderTmp  \tGROUP BY ProductId, ChildProductId  \tORDER BY min([Id])  \t  \tSET @TotalRecords = @@rowcount  \t  \t   \tIF @LoadAvailableFilters = 1  \tBEGIN  \t  \t\tCREATE TABLE #PotentialProductSpecificationAttributeIds   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[SpecificationAttributeOptionId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\t \t\t \t\tINSERT INTO #PotentialProductSpecificationAttributeIds ([ProductId], [SpecificationAttributeOptionId])  \t\tSELECT psm.ProductId, psm.SpecificationAttributeOptionId  \t\tFROM Product_SpecificationAttribute_Mapping psm  \t\tINNER JOIN #FilteredSpecificationAttributesToProduct fsatp on fsatp.ProductId = psm.ProductId  \t\tINNER JOIN SpecificationAttributeOption sao ON sao.Id = psm.SpecificationAttributeOptionId  \t\tINNER JOIN #FilteredSpecificationAttributes fsa ON fsa.AttributeId = sao.SpecificationAttributeId  \t\tWHERE fsatp.AttributesCount = @SpecificationAttributesCount - 1 AND  \t\tsao.SpecificationAttributeId NOT IN   \t\t(SELECT sao.SpecificationAttributeId FROM Product_SpecificationAttribute_Mapping psm1  \t\tINNER JOIN SpecificationAttributeOption sao1 ON sao1.Id = psm1.SpecificationAttributeOptionId  \t\tINNER JOIN #FilteredSpecificationAttributeOptions fs ON fs.SpecificationAttributeOptionId = sao.Id  \t\tWHERE psm1.ProductId = psm.ProductId)  \t\t  \t\t \t\tIF @ProductAttributesCount > 0  \t\tBEGIN  \t\t\tDELETE #PotentialProductSpecificationAttributeIds  \t\t\tFROM #PotentialProductSpecificationAttributeIds ppsa  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = ppsa.ProductId  \t\t\tWHERE   \t\t\t(  \t\t\t\tpibfa.ChildProductId = 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\tOR  \t\t\t(  \t\t\t\tpibfa.ChildProductId != 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\tEND  \t\t  \t\t \t\tIF @ManufacturersCount > 0  \t\tBEGIN  \t\t\tDELETE FROM #PotentialProductSpecificationAttributeIds  \t\t\tWHERE NOT EXISTS (  \t\t\t\tSELECT NULL FROM Product_Manufacturer_Mapping [pmm]   \t\t\t\tINNER JOIN #FilteredManufacturers [fm] ON [fm].ManufacturerId = [pmm].ManufacturerId  \t\t\t\tWHERE [pmm].ProductId = #PotentialProductSpecificationAttributeIds.ProductId)  \t\tEND  \t\t  \t\t \t\tIF @VendorsCount > 0  \t\tBEGIN  \t\t\tDELETE FROM #PotentialProductSpecificationAttributeIds  \t\t\tWHERE NOT EXISTS (  \t\t\t\tSELECT NULL FROM Product [p]   \t\t\t\tINNER JOIN #FilteredVendorIds [fv] ON [fv].VendorId = [p].VendorId  \t\t\t\tWHERE [p].Id = #PotentialProductSpecificationAttributeIds.ProductId)  \t\tEND  \t\t  \t\t  \t\t \t\t  \t\tCREATE TABLE #FilterableSpecs   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[SpecificationAttributeOptionId] int NOT NULL  \t\t)  \t\t  \t\tCREATE TABLE #FilterableSpecsDistinct   \t\t(  \t\t\t[SpecificationAttributeOptionId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\tINSERT INTO #FilterableSpecs ([ProductId], [SpecificationAttributeOptionId])  \t\tSELECT DISTINCT [psam].ProductId, [psam].SpecificationAttributeOptionId  \t\tFROM [Product_SpecificationAttribute_Mapping] [psam] with (NOLOCK)  \t\tWHERE [psam].[ProductId] IN (SELECT [pi].ProductId FROM #PageIndex [pi]) AND [psam].[AllowFiltering] = 1  \t\t  \t\t \t\t \t\t \t\t \t\t \t\t \t\t \t\t  \t\tINSERT INTO #FilterableSpecs ([ProductId], [SpecificationAttributeOptionId])  \t\tSELECT DISTINCT ProductId, SpecificationAttributeOptionId  \t\tFROM #PotentialProductSpecificationAttributeIds  \t\t  \t\tINSERT INTO #FilterableSpecsDistinct ([SpecificationAttributeOptionId])  \t\tSELECT DISTINCT SpecificationAttributeOptionId  \t\tFROM #FilterableSpecs    \t\t \t\tSELECT @FilterableSpecificationAttributeOptionIds = COALESCE(@FilterableSpecificationAttributeOptionIds + ',' , '') + CAST(SpecificationAttributeOptionId as nvarchar(4000))  \t\tFROM #FilterableSpecsDistinct  \t\t  \t\t \t\t  \t\tCREATE TABLE #PotentialProductVariantAttributeIds   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[ProductVariantAttributeId] int NOT NULL  \t\t)    \t\tCREATE INDEX IX_PotentialProductVariantAttributeIds_ProductId  \t\tON #PotentialProductVariantAttributeIds (ProductId);  \t\t  \t\t \t\t \t\t \t\t \t\t   \t\tINSERT INTO #PotentialProductVariantAttributeIds ([ProductId], [ProductVariantAttributeId])  \t\tSELECT [ppm].ProductId, [ppm].Id  \t\tFROM Product_ProductAttribute_Mapping [ppm]  \t\tINNER JOIN #FilteredProductAttributesToProduct fpatp ON fpatp.ProductId = [ppm].ProductId  \t\tINNER JOIN #FilteredProductAttributes fa ON fa.AttributeId = ppm.ProductAttributeId  \t\tWHERE fpatp.AttributesCount = @ProductAttributesCount - 1 AND   \t\t[ppm].Id NOT IN (SELECT ProductVariantAttributeId FROM #FilteredProductVariantAttributes)    \t\t \t\t \t\tIF @SpecificationAttributesCount > 0  \t\tBEGIN    \t\t\tDELETE #PotentialProductVariantAttributeIds  \t\t\tFROM #PotentialProductVariantAttributeIds ppva  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = ppva.ProductId OR pibfa.ChildProductId = ppva.ProductId  \t\t\tWHERE   \t\t\t(  \t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredSpecificationAttributesToProduct WHERE ProductId = pibfa.ProductId)  \t\t\t\tOR  \t\t\t\t(SELECT AttributesCount FROM #FilteredSpecificationAttributesToProduct WHERE ProductId = pibfa.ProductId) != @SpecificationAttributesCount  \t\t\t)    \t\tEND  \t\t  \t\t \t\tIF @ManufacturersCount > 0  \t\tBEGIN  \t\t\tDELETE FROM #PotentialProductVariantAttributeIds  \t\t\tWHERE NOT EXISTS (  \t\t\t\tSELECT NULL FROM Product_Manufacturer_Mapping pmm  \t\t\t\tINNER JOIN #FilteredManufacturers fm ON fm.ManufacturerId = pmm.ManufacturerId  \t\t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = pmm.ProductId  \t\t\t\tWHERE #PotentialProductVariantAttributeIds.ProductId = pibfa.ProductId OR #PotentialProductVariantAttributeIds.ProductId = pibfa.ChildProductId)  \t\tEND  \t\t  \t\t \t\t \t\tIF @VendorsCount > 0  \t\tBEGIN  \t\t\tDELETE FROM #PotentialProductVariantAttributeIds  \t\t\tWHERE NOT EXISTS (  \t\t\t\tSELECT NULL FROM Product [p]   \t\t\t\tINNER JOIN #FilteredVendorIds [fv] ON [fv].VendorId = [p].VendorId  \t\t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied ON #PotentialProductVariantAttributeIds.ProductId = #ProductIdsBeforeFiltersApplied.ProductId  \t\t\t\tOR #PotentialProductVariantAttributeIds.ProductId = #ProductIdsBeforeFiltersApplied.ChildProductId  \t\t\t\tWHERE [p].Id = #ProductIdsBeforeFiltersApplied.ProductId OR [p].Id = #ProductIdsBeforeFiltersApplied.ChildProductId)  \t\tEND  \t\t  \t\tCREATE TABLE #FilterableProductVariantIds   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[ProductVariantAttributeId] int NOT NULL  \t\t)  \t\t  \t\tCREATE TABLE #FilterableProductVariantIdsDistinct   \t\t(  \t\t\t[ProductVariantAttributeId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\tINSERT INTO #FilterableProductVariantIds ([ProductId], [ProductVariantAttributeId])  \t\tSELECT DISTINCT [ppm].ProductId, [ppm].Id  \t\tFROM [Product_ProductAttribute_Mapping] [ppm]  \t\tINNER JOIN #PageIndex [pi] ON [pi].ProductId = [ppm].[ProductId] OR [pi].ChildProductId = [ppm].ProductId  \t\t  \t\t \t\tINSERT INTO #FilterableProductVariantIds ([ProductId], [ProductVariantAttributeId])  \t\tSELECT DISTINCT ProductId, ProductVariantAttributeId  \t\tFROM #PotentialProductVariantAttributeIds  \t\t  \t\tINSERT INTO #FilterableProductVariantIdsDistinct ([ProductVariantAttributeId])  \t\tSELECT DISTINCT ProductVariantAttributeId  \t\tFROM #FilterableProductVariantIds  \t\t  \t\t \t\tSELECT @FilterableProductVariantAttributeIds = COALESCE(@FilterableProductVariantAttributeIds + ',' , '') + CAST(ProductVariantAttributeId as nvarchar(4000))  \t\tFROM #FilterableProductVariantIdsDistinct  \t\t  \t\t \t\t  \t\tCREATE TABLE #FilterableManufacturers   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[ManufacturerId] int NOT NULL  \t\t)  \t\t  \t\tCREATE TABLE #FilterableManufacturersDistinct   \t\t(  \t\t\t[ManufacturerId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\tINSERT INTO #FilterableManufacturers ([ProductId], [ManufacturerId])  \t\tSELECT DISTINCT [pmm].ProductId, [pmm].ManufacturerId  \t\tFROM Product_Manufacturer_Mapping [pmm]  \t\tINNER JOIN #ProductIdsBeforeFiltersApplied ON #ProductIdsBeforeFiltersApplied.ProductId = [pmm].ProductId  \t\t  \t\t \t\tIF @SpecificationAttributesCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableManufacturers  \t\t\tFROM #FilterableManufacturers fm  \t\t\tLEFT JOIN #FilteredSpecificationAttributesToProduct fsatp ON fsatp.ProductId = fm.ProductId  \t\t\tWHERE fsatp.ProductId IS NULL OR fsatp.AttributesCount != @SpecificationAttributesCount  \t\t\t  \t\tEND  \t\t  \t\t \t\tIF @ProductAttributesCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableManufacturers  \t\t\tFROM #FilterableManufacturers fm  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = fm.ProductId  \t\t\tWHERE   \t\t\t(  \t\t\t\tpibfa.ChildProductId = 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\tOR  \t\t\t(  \t\t\t\tpibfa.ChildProductId != 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\t\t  \t\tEND  \t\t  \t\t \t\tIF @VendorsCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableManufacturers  \t\t\tWHERE NOT EXISTS  \t\t\t(  \t\t\t\tSELECT NULL FROM Product [p]  \t\t\t\tINNER JOIN #FilteredVendorIds [fv] ON fv.VendorId = [p].VendorId  \t\t\t\tWHERE [p].Id = #FilterableManufacturers.ProductId  \t\t\t)  \t\t\t  \t\tEND  \t\t  \t\tINSERT INTO #FilterableManufacturersDistinct ([ManufacturerId])  \t\tSELECT DISTINCT ManufacturerId  \t\tFROM #FilterableManufacturers  \t\t  \t\t \t\tSELECT @FilterableManufacturerIds = COALESCE(@FilterableManufacturerIds + ',' , '') + CAST(ManufacturerId as nvarchar(4000))  \t\tFROM #FilterableManufacturersDistinct  \t\t  \t\t \t\tCREATE TABLE #FilterableVendors   \t\t(  \t\t\t[ProductId] int NOT NULL,  \t\t\t[VendorId] int NOT NULL  \t\t)  \t\t  \t\tCREATE TABLE #FilterableVendorsDistinct   \t\t(  \t\t\t[VendorId] int NOT NULL  \t\t)  \t\t  \t\t \t\t \t\tINSERT INTO #FilterableVendors ([ProductId], [VendorId])  \t\tSELECT DISTINCT [pv].Id, [pv].VendorId  \t\tFROM Product [pv]  \t\tINNER JOIN #ProductIdsBeforeFiltersApplied ON #ProductIdsBeforeFiltersApplied.ProductId = [pv].Id    \t\t \t\tIF @SpecificationAttributesCount > 0  \t\tBEGIN    \t\t\tDELETE FROM #FilterableVendors  \t\t\tFROM #FilterableVendors fv  \t\t\tLEFT JOIN #FilteredSpecificationAttributesToProduct fsatp ON fsatp.ProductId = fv.ProductId  \t\t\tWHERE fsatp.ProductId IS NULL OR fsatp.AttributesCount != @SpecificationAttributesCount  \t\t\t  \t\tEND  \t\t  \t\t \t\t \t\t \t\t \t\tIF @ProductAttributesCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableVendors  \t\t\tFROM #FilterableVendors fv  \t\t\tINNER JOIN #ProductIdsBeforeFiltersApplied pibfa ON pibfa.ProductId = fv.ProductId  \t\t\tWHERE   \t\t\t(  \t\t\t\tpibfa.ChildProductId = 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\tOR  \t\t\t(  \t\t\t\tpibfa.ChildProductId != 0 AND  \t\t\t\t(  \t\t\t\t\tNOT EXISTS (SELECT NULL FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId)  \t\t\t\t\tOR  \t\t\t\t\t(SELECT AttributesCount FROM #FilteredProductAttributesToProduct WHERE ProductId = pibfa.ChildProductId) != @ProductAttributesCount  \t\t\t\t)  \t\t\t)  \t\t\t\t  \t\tEND  \t\t  \t\t \t\tIF @ManufacturersCount > 0  \t\tBEGIN  \t\t  \t\t\tDELETE FROM #FilterableVendors  \t\t\tWHERE NOT EXISTS  \t\t\t(  \t\t\t\tSELECT NULL FROM Product_Manufacturer_Mapping [pmm]  \t\t\t\tINNER JOIN #FilteredManufacturers [fm] ON [fm].ManufacturerId = [pmm].ManufacturerId  \t\t\t\tWHERE [pmm].ProductId = #FilterableVendors.ProductId  \t\t\t)  \t\t\t  \t\tEND  \t\t  \t\tINSERT INTO #FilterableVendorsDistinct ([VendorId])  \t\tSELECT DISTINCT VendorId  \t\tFROM #FilterableVendors    \t\t \t\tSELECT @FilterableVendorIds = COALESCE(@FilterableVendorIds + ',' , '') + CAST(VendorId as nvarchar(4000))  \t\tFROM #FilterableVendorsDistinct  \t\t  \t\tDROP TABLE #ProductIdsBeforeFiltersApplied  \t\tDROP TABLE #FilteredSpecificationAttributeOptions  \t\tDROP TABLE #FilterableSpecs  \t\tDROP TABLE #FilteredSpecificationAttributes  \t\tDROP TABLE #FilteredSpecificationAttributesToProduct  \t\tDROP TABLE #FilterableSpecsDistinct  \t\tDROP TABLE #PotentialProductSpecificationAttributeIds  \t\tDROP TABLE #FilteredProductVariantAttributes  \t\tDROP TABLE #FilteredProductAttributes  \t\tDROP TABLE #FilteredProductAttributesToProduct  \t\tDROP TABLE #FilterableProductVariantIds  \t\tDROP TABLE #FilterableProductVariantIdsDistinct  \t\tDROP TABLE #PotentialProductVariantAttributeIds  \t\tDROP TABLE #FilteredManufacturers  \t\tDROP TABLE #FilterableManufacturers  \t\tDROP TABLE #FilterableVendors  \t\tDROP TABLE #FilterableVendorsDistinct  \t\tDROP TABLE #FilterableManufacturersDistinct  \t\t   \tEND   \t   \t  \tDELETE #PageIndex   \tFROM #PageIndex  \tLEFT OUTER JOIN (  \t   SELECT MIN(IndexId) as RowId, ProductId   \t   FROM #PageIndex   \t   GROUP BY ProductId  \t) AS KeepRows ON  \t   #PageIndex.IndexId = KeepRows.RowId  \tWHERE  \t   KeepRows.RowId IS NULL  \t     \tSET @TotalRecords = @TotalRecords - @@rowcount   \t   \t  \t  \t  \t  \t   \tCREATE TABLE #PageIndexDistinct   \t(  \t\t[IndexId] int IDENTITY (1, 1) NOT NULL,  \t\t[ProductId] int NOT NULL  \t)  \t  \tINSERT INTO #PageIndexDistinct ([ProductId])  \tSELECT [ProductId]  \tFROM #PageIndex  \tORDER BY [IndexId]  \t  \tIF @IsOnSaleFilterEnabled = 1  \tBEGIN  \t\t \t\tIF EXISTS (SELECT NULL FROM Product p   \t\t\t\t  LEFT JOIN Product cp ON p.Id = cp.ParentGroupedProductId   \t\t\t\t  INNER JOIN #PageIndexDistinct [pid] ON [pid].ProductId = p.Id  \t\t\t\t  WHERE (  \t\t\t\t\t\t\t(cp.Id IS NULL AND p.OldPrice > 0 AND p.Price != p.OldPrice)  \t\t\t\t\t\t\tOR  \t\t\t\t\t\t\t(cp.Id IS NOT NULL AND cp.OldPrice > 0 AND cp.OldPrice != cp.Price)  \t\t\t\t\t\t)   \t\t\t\t  )  \t\tBEGIN  \t\t\tSET @HasProductsOnSale = 1  \t\tEND  \t\tELSE  \t\t\tSET @HasProductsOnSale = 0  \tEND  \t  \tIF @IsInStockFilterEnabled = 1  \tBEGIN  \t \t\tIF EXISTS (SELECT NULL FROM Product p   \t\t\t\tLEFT JOIN Product cp ON p.Id = cp.ParentGroupedProductId   \t\t\t\tINNER JOIN #PageIndexDistinct [pid] ON [pid].ProductId = p.Id  \t\t\t\tWHERE (  \t\t\t\t\t\t(cp.ID IS NULL  AND   \t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t(p.ManageInventoryMethodId = 0) OR  \t\t\t\t\t\t\t\t\t(P.ManageInventoryMethodId = 1 AND  \t\t\t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t\t\t(p.StockQuantity > 0 AND p.UseMultipleWarehouses = 0) OR   \t\t\t\t\t\t\t\t\t\t(EXISTS(SELECT 1 FROM ProductWarehouseInventory [pwi] WHERE\t[pwi].ProductId = p.Id\tAND [pwi].StockQuantity > 0 AND [pwi].StockQuantity > [pwi].ReservedQuantity) AND p.UseMultipleWarehouses = 1)  \t\t\t\t\t\t\t\t\t)  \t\t\t\t\t\t\t\t)  \t\t\t\t\t\t\t)  \t\t\t\t\t\t)  \t\t\t\t\t\tOR  \t\t\t\t\t\t(p.Id IS NOT NULL AND   \t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t(cp.ManageInventoryMethodId = 0) OR  \t\t\t\t\t\t\t\t(cp.ManageInventoryMethodId = 1 AND  \t\t\t\t\t\t\t\t\t(  \t\t\t\t\t\t\t\t\t\t(cp.StockQuantity > 0 AND cp.UseMultipleWarehouses = 0) OR   \t\t\t\t\t\t\t\t\t\t(EXISTS(SELECT 1 FROM ProductWarehouseInventory [pwi] WHERE [pwi].ProductId = cp.Id\tAND [pwi].StockQuantity > 0 AND [pwi].StockQuantity > [pwi].ReservedQuantity) AND cp.UseMultipleWarehouses = 1)  \t\t\t\t\t\t\t\t\t)  \t\t\t\t\t\t\t\t)  \t\t\t\t\t\t\t)  \t\t\t\t\t\t)  \t\t\t\t\t)  \t\t\t\t)  \t\tBEGIN  \t\t\tSET @HasProductsInStock = 1  \t\tEND  \t\tELSE  \t\t\tSET @HasProductsInStock = 0  \tEND    \tSELECT TOP (@RowsToReturn)  \t\tp.*  \tFROM  \t\t#PageIndexDistinct [pi]  \t\tINNER JOIN Product p with (NOLOCK) on p.Id = [pi].[ProductId]  \tWHERE  \t\t[pi].IndexId > @PageLowerBound AND   \t\t[pi].IndexId < @PageUpperBound  \tORDER BY  \t\t[pi].IndexId  \t  \tDROP TABLE #KeywordProducts  \tDROP TABLE #FilteredCategoryIds  \tDROP TABLE #FilteredVendorIds  \tDROP TABLE #FilteredCustomerRoleIds  \tDROP TABLE #DisplayOrderTmp  \tDROP TABLE #PageIndex  \tDROP TABLE #PageIndexDistinct    \t  END";

        private string DropProductSpecificationAttributeMappingPerformanceProblemIndex = "IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product_SpecificationAttribute_Mapping]') AND name = N'IX_PSAM_SpecificationAttributeOptionId_AllowFiltering') DROP INDEX [IX_PSAM_SpecificationAttributeOptionId_AllowFiltering] ON [dbo].[Product_SpecificationAttribute_Mapping]";

        private string CreateIndexOnProductSpecificationAttributeMappingTable = "IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product_SpecificationAttribute_Mapping]') AND name = N'IX_Product_SpecificationAttribute_Mapping_ProductId') CREATE NONCLUSTERED INDEX [IX_Product_SpecificationAttribute_Mapping_ProductId] ON [dbo].[Product_SpecificationAttribute_Mapping]( [ProductId] ASC )";

        private string CreateProductSpecificationAttributeMappingPerformanceProblemIndex = "IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product_SpecificationAttribute_Mapping]') AND name = N'IX_PSAM_SpecificationAttributeOptionId_AllowFiltering') CREATE NONCLUSTERED INDEX [IX_PSAM_SpecificationAttributeOptionId_AllowFiltering] ON [dbo].[Product_SpecificationAttribute_Mapping]( [SpecificationAttributeOptionId] ASC, [AllowFiltering] ASC) ON [PRIMARY]";

        private string DropProductCategoryMappingPerformanceProblemIndex = "IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product_Category_Mapping]') AND name = N'IX_Product_Category_Mapping_ProductId') DROP INDEX [IX_Product_Category_Mapping_ProductId] ON [dbo].[Product_Category_Mapping]";

        private string CreateProductCategoryMappingTablePerformanceProblemIndex = "IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product_Category_Mapping]') AND name = N'IX_Product_Category_Mapping_ProductId') CREATE NONCLUSTERED INDEX [IX_Product_Category_Mapping_ProductId] ON [dbo].[Product_Category_Mapping]( [ProductId] ASC ) INCLUDE ( [CategoryId] ) ON [PRIMARY]";

        private string DropSplitStringIfExists = "IF EXISTS (SELECT* FROM sysobjects WHERE id = object_id(N'nop_splitstring_to_table') AND xtype IN(N'FN', N'IF', N'TF')) DROP FUNCTION[dbo].[nop_splitstring_to_table]";

        private string CreateSplitStringFunction = "CREATE FUNCTION [dbo].[nop_splitstring_to_table]  (      @string NVARCHAR(MAX),      @delimiter CHAR(1)  )  RETURNS @output TABLE(      data NVARCHAR(MAX)  )  BEGIN      DECLARE @start INT, @end INT      SELECT @start = 1, @end = CHARINDEX(@delimiter, @string)        WHILE @start < LEN(@string) + 1 BEGIN          IF @end = 0               SET @end = LEN(@string) + 1            INSERT INTO @output (data)           VALUES(SUBSTRING(@string, @start, @end - @start))          SET @start = @end + 1          SET @end = CHARINDEX(@delimiter, @string, @start)      END      RETURN  END  ";

        private const string GetEngineEdition = "select SERVERPROPERTY('EngineEdition') as Value";

        private const int SqlAzureEngineEdition = 5;

        public AjaxFiltersDatabaseService(INopDataProvider dataProvider, IEncryptionService encryptionService, ISettingService settingService, ILogger logger)
        {
            _dataProvider = dataProvider;
            _encryptionService = encryptionService;
            _settingService = settingService;
            _logger = logger;
        }

        public async Task CreateDatabaseScriptsAsync()
        {
            await ChangeScriptsDatabaseSchemaAsync();
            await ExecuteCreateDatabaseScriptsAsync();
            string encryptedDatabaseKey = GenerateEncryptedDatabaseKey();
            NopAjaxFiltersSettings nopAjaxFiltersSettings = await _settingService.LoadSettingAsync<NopAjaxFiltersSettings>();
            nopAjaxFiltersSettings.EncryptedDatabaseHashKey = encryptedDatabaseKey;
            await _settingService.SaveSettingAsync(nopAjaxFiltersSettings);
        }

        public async Task UpdateDatabaseScriptsAsync()
        {
            await ChangeScriptsDatabaseSchemaAsync();
            string encryptedDatabaseHashKey = GenerateEncryptedDatabaseKey();
            NopAjaxFiltersSettings nopAjaxFiltersSettings = await _settingService.LoadSettingAsync<NopAjaxFiltersSettings>();
            string encryptedDatabaseHashKey2 = nopAjaxFiltersSettings.EncryptedDatabaseHashKey;
            if (string.IsNullOrEmpty(encryptedDatabaseHashKey2))
            {
                await RemoveDatabaseScriptsAsync();
                await CreateDatabaseScriptsAsync();
            }
            else if (!string.Equals(encryptedDatabaseHashKey, encryptedDatabaseHashKey2, StringComparison.Ordinal))
            {
                bool shouldUpdateSortFunction = nopAjaxFiltersSettings.DropSortFunctionDuringUpdate;
                await ExecuteDropDatabaseScriptsAsync(shouldUpdateSortFunction);
                await ExecuteCreateDatabaseScriptsAsync(shouldUpdateSortFunction);
                nopAjaxFiltersSettings.EncryptedDatabaseHashKey = encryptedDatabaseHashKey;
                await _settingService.SaveSettingAsync(nopAjaxFiltersSettings);
            }
        }

        public async Task RemoveDatabaseScriptsAsync()
        {
            await ChangeScriptsDatabaseSchemaAsync();
            await ExecuteDropDatabaseScriptsAsync();
        }

        private async Task ExecuteDropDatabaseScriptsAsync(bool dropSortFunction = true)
        {
            await _dataProvider.ExecuteNonQueryAsync(DropProcedureSql);
            await _dataProvider.ExecuteNonQueryAsync(CreateProductSpecificationAttributeMappingPerformanceProblemIndex);
            if (dropSortFunction)
            {
                await _dataProvider.ExecuteNonQueryAsync(DropSortFunctionSql);
            }
            NopAjaxFiltersSettings nopAjaxFiltersSettings = await _settingService.LoadSettingAsync<NopAjaxFiltersSettings>();
            nopAjaxFiltersSettings.EncryptedDatabaseHashKey = string.Empty;
            await _settingService.SaveSettingAsync(nopAjaxFiltersSettings);
        }

        private async Task ExecuteCreateDatabaseScriptsAsync(bool createSortFunction = true)
        {
            try
            {
                if (createSortFunction)
                {
                    await _dataProvider.ExecuteNonQueryAsync(CreateSortFunctionSql);
                }
                await _dataProvider.ExecuteNonQueryAsync(DropProductSpecificationAttributeMappingPerformanceProblemIndex);
                await _dataProvider.ExecuteNonQueryAsync(CreateIndexOnProductSpecificationAttributeMappingTable);
                await _dataProvider.ExecuteNonQueryAsync(DropProductCategoryMappingPerformanceProblemIndex);
                await _dataProvider.ExecuteNonQueryAsync(CreateProductCategoryMappingTablePerformanceProblemIndex);
                await _dataProvider.ExecuteNonQueryAsync(DropSplitStringIfExists);
                await _dataProvider.ExecuteNonQueryAsync(CreateSplitStringFunction);
            }
            catch (Exception ex)
            {
                await _logger.ErrorAsync(ex.Message, ex);
            }
            try
            {
                if ((await _dataProvider.QueryAsync<IntQueryType>("select SERVERPROPERTY('EngineEdition') as Value", Array.Empty<DataParameter>())).Select((IntQueryType intValue) => intValue.Value).FirstOrDefault()!.Value != 5)
                {
                    await _dataProvider.ExecuteNonQueryAsync(CreateStoredProcedureSql);
                }
                else
                {
                    await _dataProvider.ExecuteNonQueryAsync(SqlUnencrypred);
                }
            }
            catch
            {
                await _dataProvider.ExecuteNonQueryAsync(SqlUnencrypred);
            }
        }

        private string GenerateEncryptedDatabaseKey()
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(DropProcedureSql);
            stringBuilder.Append(CreateSortFunctionSql);
            stringBuilder.Append(DropSortFunctionSql);
            stringBuilder.Append(CreateStoredProcedureSql);
            stringBuilder.Append(SqlUnencrypred);
            stringBuilder.Append(DropProductSpecificationAttributeMappingPerformanceProblemIndex);
            stringBuilder.Append(CreateIndexOnProductSpecificationAttributeMappingTable);
            stringBuilder.Append(CreateProductSpecificationAttributeMappingPerformanceProblemIndex);
            stringBuilder.Append(DropProductCategoryMappingPerformanceProblemIndex);
            stringBuilder.Append(CreateProductCategoryMappingTablePerformanceProblemIndex);
            stringBuilder.Append(CreateSplitStringFunction);
            stringBuilder.Append(DropSplitStringIfExists);
            return _encryptionService.CreatePasswordHash(stringBuilder.ToString(), "SS_AjaxFilters_EK_351", "SHA1");
        }

        private async Task ChangeScriptsDatabaseSchemaAsync()
        {
            _ = string.Empty;
            Dictionary<string, string> valuesToReplace = new Dictionary<string, string>();
            Dictionary<string, string> functionNamesDictionary = new Dictionary<string, string>
            {
                {
                    "[dbo].[DeleteGuests]",
                    "[dbo].[DeleteGuests]"
                },
                {
                    "[dbo].[FullText_Disable]",
                    "[dbo].[FullText_Disable]"
                },
                {
                    "[dbo].[FullText_Enable]",
                    "[dbo].[FullText_Enable]"
                },
                {
                    "[dbo].[FullText_IsSupported]",
                    "[dbo].[FullText_IsSupported]"
                },
                {
                    "[dbo].[ProductLoadAllPaged]",
                    "[dbo].[ProductLoadAllPaged]"
                },
                {
                    "[dbo].[ProductTagCountLoadAll]",
                    "[dbo].[ProductTagCountLoadAll]"
                },
                {
                    "[dbo].[nop_splitstring_to_table]",
                    "[dbo].[nop_splitstring_to_table]"
                }
            };
            StringQueryType schemaAnnotation = (await _dataProvider.QueryAsync<StringQueryType>("SELECT TOP (1) TABLE_SCHEMA as Value FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME LIKE 'Category'", Array.Empty<DataParameter>())).FirstOrDefault();
            StringQueryType stringQueryType = (await _dataProvider.QueryAsync<StringQueryType>("SELECT TOP (1) sys.schemas.name AS Value FROM sys.objects INNER JOIN sys.schemas ON sys.objects.schema_id = sys.schemas.schema_id WHERE sys.objects.name LIKE '%nop_splitstring_to_table%'", Array.Empty<DataParameter>())).FirstOrDefault();
            if (stringQueryType != null && !schemaAnnotation.Equals(stringQueryType))
            {
                string newValue = "[" + stringQueryType.Value + "]";
                foreach (KeyValuePair<string, string> item in functionNamesDictionary)
                {
                    string value = item.Value.Replace("[dbo]", newValue);
                    valuesToReplace.Add(item.Key, value);
                }
            }
            string text = ((schemaAnnotation == null) ? (await _settingService.GetSettingByKeyAsync("ajaxFilterSettings.DboSchema", "[dbo]")) : ("[" + schemaAnnotation.Value + "]"));
            if (!text.Equals("[dbo]"))
            {
                valuesToReplace.Add("[dbo]", text);
            }
            if (valuesToReplace.Count > 0)
            {
                CreateSortFunctionSql = ReplaceSchemaNames(CreateSortFunctionSql, valuesToReplace);
                DropSortFunctionSql = ReplaceSchemaNames(DropSortFunctionSql, valuesToReplace);
                DropProcedureSql = ReplaceSchemaNames(DropProcedureSql, valuesToReplace);
                CreateStoredProcedureSql = ReplaceSchemaNames(CreateStoredProcedureSql, valuesToReplace);
                SqlUnencrypred = ReplaceSchemaNames(SqlUnencrypred, valuesToReplace);
                DropProductSpecificationAttributeMappingPerformanceProblemIndex = ReplaceSchemaNames(DropProductSpecificationAttributeMappingPerformanceProblemIndex, valuesToReplace);
                CreateIndexOnProductSpecificationAttributeMappingTable = ReplaceSchemaNames(CreateIndexOnProductSpecificationAttributeMappingTable, valuesToReplace);
                CreateProductSpecificationAttributeMappingPerformanceProblemIndex = ReplaceSchemaNames(CreateProductSpecificationAttributeMappingPerformanceProblemIndex, valuesToReplace);
                DropProductCategoryMappingPerformanceProblemIndex = ReplaceSchemaNames(DropProductCategoryMappingPerformanceProblemIndex, valuesToReplace);
                CreateProductCategoryMappingTablePerformanceProblemIndex = ReplaceSchemaNames(CreateProductCategoryMappingTablePerformanceProblemIndex, valuesToReplace);
                CreateSplitStringFunction = ReplaceSchemaNames(CreateSplitStringFunction, valuesToReplace);
                DropSplitStringIfExists = ReplaceSchemaNames(DropSplitStringIfExists, valuesToReplace);
            }
        }

        private string ReplaceSchemaNames(string sqlScript, IDictionary<string, string> valuesToReplace)
        {
            foreach (KeyValuePair<string, string> item in valuesToReplace)
            {
                sqlScript = sqlScript.Replace(item.Key, item.Value);
            }
            return sqlScript;
        }
    }
}